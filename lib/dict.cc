//
// File generated by rootcint at Sat Dec 10 11:19:50 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void BBCParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BBCParticle(void *p = 0);
   static void *newArray_BBCParticle(Long_t size, void *p);
   static void delete_BBCParticle(void *p);
   static void deleteArray_BBCParticle(void *p);
   static void destruct_BBCParticle(void *p);
   static void streamer_BBCParticle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::BBCParticle*)
   {
      ::BBCParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BBCParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BBCParticle", ::BBCParticle::Class_Version(), "./BBCParticle.hpp", 9,
                  typeid(::BBCParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::BBCParticle::Dictionary, isa_proxy, 0,
                  sizeof(::BBCParticle) );
      instance.SetNew(&new_BBCParticle);
      instance.SetNewArray(&newArray_BBCParticle);
      instance.SetDelete(&delete_BBCParticle);
      instance.SetDeleteArray(&deleteArray_BBCParticle);
      instance.SetDestructor(&destruct_BBCParticle);
      instance.SetStreamerFunc(&streamer_BBCParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::BBCParticle*)
   {
      return GenerateInitInstanceLocal((::BBCParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BBCParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Flag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Flag(void *p = 0);
   static void *newArray_Flag(Long_t size, void *p);
   static void delete_Flag(void *p);
   static void deleteArray_Flag(void *p);
   static void destruct_Flag(void *p);
   static void streamer_Flag(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Flag*)
   {
      ::Flag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Flag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Flag", ::Flag::Class_Version(), "./Flag.hpp", 7,
                  typeid(::Flag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Flag::Dictionary, isa_proxy, 0,
                  sizeof(::Flag) );
      instance.SetNew(&new_Flag);
      instance.SetNewArray(&newArray_Flag);
      instance.SetDelete(&delete_Flag);
      instance.SetDeleteArray(&deleteArray_Flag);
      instance.SetDestructor(&destruct_Flag);
      instance.SetStreamerFunc(&streamer_Flag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Flag*)
   {
      return GenerateInitInstanceLocal((::Flag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Flag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void BBC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BBC(void *p = 0);
   static void *newArray_BBC(Long_t size, void *p);
   static void delete_BBC(void *p);
   static void deleteArray_BBC(void *p);
   static void destruct_BBC(void *p);
   static void streamer_BBC(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::BBC*)
   {
      ::BBC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BBC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BBC", ::BBC::Class_Version(), "./BBC.hpp", 12,
                  typeid(::BBC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::BBC::Dictionary, isa_proxy, 0,
                  sizeof(::BBC) );
      instance.SetNew(&new_BBC);
      instance.SetNewArray(&newArray_BBC);
      instance.SetDelete(&delete_BBC);
      instance.SetDeleteArray(&deleteArray_BBC);
      instance.SetDestructor(&destruct_BBC);
      instance.SetStreamerFunc(&streamer_BBC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::BBC*)
   {
      return GenerateInitInstanceLocal((::BBC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BBC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void BBCContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BBCContainer(void *p = 0);
   static void *newArray_BBCContainer(Long_t size, void *p);
   static void delete_BBCContainer(void *p);
   static void deleteArray_BBCContainer(void *p);
   static void destruct_BBCContainer(void *p);
   static void streamer_BBCContainer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::BBCContainer*)
   {
      ::BBCContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BBCContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BBCContainer", ::BBCContainer::Class_Version(), "./BBCContainer.hpp", 12,
                  typeid(::BBCContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::BBCContainer::Dictionary, isa_proxy, 0,
                  sizeof(::BBCContainer) );
      instance.SetNew(&new_BBCContainer);
      instance.SetNewArray(&newArray_BBCContainer);
      instance.SetDelete(&delete_BBCContainer);
      instance.SetDeleteArray(&deleteArray_BBCContainer);
      instance.SetDestructor(&destruct_BBCContainer);
      instance.SetStreamerFunc(&streamer_BBCContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::BBCContainer*)
   {
      return GenerateInitInstanceLocal((::BBCContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BBCContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Central_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Central(void *p = 0);
   static void *newArray_Central(Long_t size, void *p);
   static void delete_Central(void *p);
   static void deleteArray_Central(void *p);
   static void destruct_Central(void *p);
   static void streamer_Central(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Central*)
   {
      ::Central *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Central >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Central", ::Central::Class_Version(), "./Central.hpp", 9,
                  typeid(::Central), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Central::Dictionary, isa_proxy, 0,
                  sizeof(::Central) );
      instance.SetNew(&new_Central);
      instance.SetNewArray(&newArray_Central);
      instance.SetDelete(&delete_Central);
      instance.SetDeleteArray(&deleteArray_Central);
      instance.SetDestructor(&destruct_Central);
      instance.SetStreamerFunc(&streamer_Central);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Central*)
   {
      return GenerateInitInstanceLocal((::Central*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Central*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void CentralContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CentralContainer(void *p = 0);
   static void *newArray_CentralContainer(Long_t size, void *p);
   static void delete_CentralContainer(void *p);
   static void deleteArray_CentralContainer(void *p);
   static void destruct_CentralContainer(void *p);
   static void streamer_CentralContainer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::CentralContainer*)
   {
      ::CentralContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CentralContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CentralContainer", ::CentralContainer::Class_Version(), "./CentralContainer.hpp", 11,
                  typeid(::CentralContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::CentralContainer::Dictionary, isa_proxy, 0,
                  sizeof(::CentralContainer) );
      instance.SetNew(&new_CentralContainer);
      instance.SetNewArray(&newArray_CentralContainer);
      instance.SetDelete(&delete_CentralContainer);
      instance.SetDeleteArray(&deleteArray_CentralContainer);
      instance.SetDestructor(&destruct_CentralContainer);
      instance.SetStreamerFunc(&streamer_CentralContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::CentralContainer*)
   {
      return GenerateInitInstanceLocal((::CentralContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CentralContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Forward_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Forward(void *p = 0);
   static void *newArray_Forward(Long_t size, void *p);
   static void delete_Forward(void *p);
   static void deleteArray_Forward(void *p);
   static void destruct_Forward(void *p);
   static void streamer_Forward(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Forward*)
   {
      ::Forward *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Forward >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Forward", ::Forward::Class_Version(), "./Forward.hpp", 9,
                  typeid(::Forward), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Forward::Dictionary, isa_proxy, 0,
                  sizeof(::Forward) );
      instance.SetNew(&new_Forward);
      instance.SetNewArray(&newArray_Forward);
      instance.SetDelete(&delete_Forward);
      instance.SetDeleteArray(&deleteArray_Forward);
      instance.SetDestructor(&destruct_Forward);
      instance.SetStreamerFunc(&streamer_Forward);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Forward*)
   {
      return GenerateInitInstanceLocal((::Forward*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Forward*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ForwardContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ForwardContainer(void *p = 0);
   static void *newArray_ForwardContainer(Long_t size, void *p);
   static void delete_ForwardContainer(void *p);
   static void deleteArray_ForwardContainer(void *p);
   static void destruct_ForwardContainer(void *p);
   static void streamer_ForwardContainer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ForwardContainer*)
   {
      ::ForwardContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ForwardContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ForwardContainer", ::ForwardContainer::Class_Version(), "./ForwardContainer.hpp", 11,
                  typeid(::ForwardContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ForwardContainer::Dictionary, isa_proxy, 0,
                  sizeof(::ForwardContainer) );
      instance.SetNew(&new_ForwardContainer);
      instance.SetNewArray(&newArray_ForwardContainer);
      instance.SetDelete(&delete_ForwardContainer);
      instance.SetDeleteArray(&deleteArray_ForwardContainer);
      instance.SetDestructor(&destruct_ForwardContainer);
      instance.SetStreamerFunc(&streamer_ForwardContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ForwardContainer*)
   {
      return GenerateInitInstanceLocal((::ForwardContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ForwardContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RecoDataContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RecoDataContainer(void *p = 0);
   static void *newArray_RecoDataContainer(Long_t size, void *p);
   static void delete_RecoDataContainer(void *p);
   static void deleteArray_RecoDataContainer(void *p);
   static void destruct_RecoDataContainer(void *p);
   static void streamer_RecoDataContainer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RecoDataContainer*)
   {
      ::RecoDataContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RecoDataContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RecoDataContainer", ::RecoDataContainer::Class_Version(), "./RecoDataContainer.hpp", 11,
                  typeid(::RecoDataContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RecoDataContainer::Dictionary, isa_proxy, 0,
                  sizeof(::RecoDataContainer) );
      instance.SetNew(&new_RecoDataContainer);
      instance.SetNewArray(&newArray_RecoDataContainer);
      instance.SetDelete(&delete_RecoDataContainer);
      instance.SetDeleteArray(&deleteArray_RecoDataContainer);
      instance.SetDestructor(&destruct_RecoDataContainer);
      instance.SetStreamerFunc(&streamer_RecoDataContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RecoDataContainer*)
   {
      return GenerateInitInstanceLocal((::RecoDataContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RecoDataContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCDataContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCDataContainer(void *p = 0);
   static void *newArray_MCDataContainer(Long_t size, void *p);
   static void delete_MCDataContainer(void *p);
   static void deleteArray_MCDataContainer(void *p);
   static void destruct_MCDataContainer(void *p);
   static void streamer_MCDataContainer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCDataContainer*)
   {
      ::MCDataContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCDataContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCDataContainer", ::MCDataContainer::Class_Version(), "./MCDataContainer.hpp", 7,
                  typeid(::MCDataContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCDataContainer::Dictionary, isa_proxy, 0,
                  sizeof(::MCDataContainer) );
      instance.SetNew(&new_MCDataContainer);
      instance.SetNewArray(&newArray_MCDataContainer);
      instance.SetDelete(&delete_MCDataContainer);
      instance.SetDeleteArray(&deleteArray_MCDataContainer);
      instance.SetDestructor(&destruct_MCDataContainer);
      instance.SetStreamerFunc(&streamer_MCDataContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCDataContainer*)
   {
      return GenerateInitInstanceLocal((::MCDataContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCDataContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ZDCContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ZDCContainer(void *p = 0);
   static void *newArray_ZDCContainer(Long_t size, void *p);
   static void delete_ZDCContainer(void *p);
   static void deleteArray_ZDCContainer(void *p);
   static void destruct_ZDCContainer(void *p);
   static void streamer_ZDCContainer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ZDCContainer*)
   {
      ::ZDCContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ZDCContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ZDCContainer", ::ZDCContainer::Class_Version(), "./ZDCContainer.hpp", 11,
                  typeid(::ZDCContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ZDCContainer::Dictionary, isa_proxy, 0,
                  sizeof(::ZDCContainer) );
      instance.SetNew(&new_ZDCContainer);
      instance.SetNewArray(&newArray_ZDCContainer);
      instance.SetDelete(&delete_ZDCContainer);
      instance.SetDeleteArray(&deleteArray_ZDCContainer);
      instance.SetDestructor(&destruct_ZDCContainer);
      instance.SetStreamerFunc(&streamer_ZDCContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ZDCContainer*)
   {
      return GenerateInitInstanceLocal((::ZDCContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ZDCContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RomanPot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RomanPot(void *p = 0);
   static void *newArray_RomanPot(Long_t size, void *p);
   static void delete_RomanPot(void *p);
   static void deleteArray_RomanPot(void *p);
   static void destruct_RomanPot(void *p);
   static void streamer_RomanPot(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RomanPot*)
   {
      ::RomanPot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RomanPot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RomanPot", ::RomanPot::Class_Version(), "./RomanPot.hpp", 9,
                  typeid(::RomanPot), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RomanPot::Dictionary, isa_proxy, 0,
                  sizeof(::RomanPot) );
      instance.SetNew(&new_RomanPot);
      instance.SetNewArray(&newArray_RomanPot);
      instance.SetDelete(&delete_RomanPot);
      instance.SetDeleteArray(&deleteArray_RomanPot);
      instance.SetDestructor(&destruct_RomanPot);
      instance.SetStreamerFunc(&streamer_RomanPot);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RomanPot*)
   {
      return GenerateInitInstanceLocal((::RomanPot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RomanPot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RomanPotContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RomanPotContainer(void *p = 0);
   static void *newArray_RomanPotContainer(Long_t size, void *p);
   static void delete_RomanPotContainer(void *p);
   static void deleteArray_RomanPotContainer(void *p);
   static void destruct_RomanPotContainer(void *p);
   static void streamer_RomanPotContainer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RomanPotContainer*)
   {
      ::RomanPotContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RomanPotContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RomanPotContainer", ::RomanPotContainer::Class_Version(), "./RomanPotContainer.hpp", 11,
                  typeid(::RomanPotContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RomanPotContainer::Dictionary, isa_proxy, 0,
                  sizeof(::RomanPotContainer) );
      instance.SetNew(&new_RomanPotContainer);
      instance.SetNewArray(&newArray_RomanPotContainer);
      instance.SetDelete(&delete_RomanPotContainer);
      instance.SetDeleteArray(&deleteArray_RomanPotContainer);
      instance.SetDestructor(&destruct_RomanPotContainer);
      instance.SetStreamerFunc(&streamer_RomanPotContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RomanPotContainer*)
   {
      return GenerateInitInstanceLocal((::RomanPotContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RomanPotContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RHICfSimEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RHICfSimEvent(void *p = 0);
   static void *newArray_RHICfSimEvent(Long_t size, void *p);
   static void delete_RHICfSimEvent(void *p);
   static void deleteArray_RHICfSimEvent(void *p);
   static void destruct_RHICfSimEvent(void *p);
   static void streamer_RHICfSimEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RHICfSimEvent*)
   {
      ::RHICfSimEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RHICfSimEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RHICfSimEvent", ::RHICfSimEvent::Class_Version(), "./RHICfSimEvent.hpp", 15,
                  typeid(::RHICfSimEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RHICfSimEvent::Dictionary, isa_proxy, 0,
                  sizeof(::RHICfSimEvent) );
      instance.SetNew(&new_RHICfSimEvent);
      instance.SetNewArray(&newArray_RHICfSimEvent);
      instance.SetDelete(&delete_RHICfSimEvent);
      instance.SetDeleteArray(&deleteArray_RHICfSimEvent);
      instance.SetDestructor(&destruct_RHICfSimEvent);
      instance.SetStreamerFunc(&streamer_RHICfSimEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RHICfSimEvent*)
   {
      return GenerateInitInstanceLocal((::RHICfSimEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RHICfSimEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RunInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RunInfo(void *p = 0);
   static void *newArray_RunInfo(Long_t size, void *p);
   static void delete_RunInfo(void *p);
   static void deleteArray_RunInfo(void *p);
   static void destruct_RunInfo(void *p);
   static void streamer_RunInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RunInfo*)
   {
      ::RunInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RunInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RunInfo", ::RunInfo::Class_Version(), "./RunInfo.hpp", 10,
                  typeid(::RunInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RunInfo::Dictionary, isa_proxy, 0,
                  sizeof(::RunInfo) );
      instance.SetNew(&new_RunInfo);
      instance.SetNewArray(&newArray_RunInfo);
      instance.SetDelete(&delete_RunInfo);
      instance.SetDeleteArray(&deleteArray_RunInfo);
      instance.SetDestructor(&destruct_RunInfo);
      instance.SetStreamerFunc(&streamer_RunInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RunInfo*)
   {
      return GenerateInitInstanceLocal((::RunInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RunInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr BBCParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *BBCParticle::Class_Name()
{
   return "BBCParticle";
}

//______________________________________________________________________________
const char *BBCParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BBCParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BBCParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BBCParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BBCParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BBCParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BBCParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BBCParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Flag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Flag::Class_Name()
{
   return "Flag";
}

//______________________________________________________________________________
const char *Flag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Flag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Flag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Flag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Flag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Flag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Flag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Flag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr BBC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *BBC::Class_Name()
{
   return "BBC";
}

//______________________________________________________________________________
const char *BBC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BBC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BBC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BBC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BBC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BBC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BBC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BBC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr BBCContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *BBCContainer::Class_Name()
{
   return "BBCContainer";
}

//______________________________________________________________________________
const char *BBCContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BBCContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BBCContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BBCContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BBCContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BBCContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BBCContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BBCContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Central::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Central::Class_Name()
{
   return "Central";
}

//______________________________________________________________________________
const char *Central::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Central*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Central::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Central*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Central::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Central*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Central::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Central*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr CentralContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *CentralContainer::Class_Name()
{
   return "CentralContainer";
}

//______________________________________________________________________________
const char *CentralContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CentralContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CentralContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CentralContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CentralContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CentralContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CentralContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CentralContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Forward::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Forward::Class_Name()
{
   return "Forward";
}

//______________________________________________________________________________
const char *Forward::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Forward*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Forward::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Forward*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Forward::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Forward*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Forward::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Forward*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ForwardContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ForwardContainer::Class_Name()
{
   return "ForwardContainer";
}

//______________________________________________________________________________
const char *ForwardContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ForwardContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ForwardContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ForwardContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ForwardContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ForwardContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ForwardContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ForwardContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RecoDataContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RecoDataContainer::Class_Name()
{
   return "RecoDataContainer";
}

//______________________________________________________________________________
const char *RecoDataContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RecoDataContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RecoDataContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RecoDataContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RecoDataContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RecoDataContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RecoDataContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RecoDataContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCDataContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCDataContainer::Class_Name()
{
   return "MCDataContainer";
}

//______________________________________________________________________________
const char *MCDataContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCDataContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCDataContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCDataContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCDataContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCDataContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCDataContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCDataContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ZDCContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ZDCContainer::Class_Name()
{
   return "ZDCContainer";
}

//______________________________________________________________________________
const char *ZDCContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ZDCContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ZDCContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ZDCContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ZDCContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ZDCContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ZDCContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ZDCContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RomanPot::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RomanPot::Class_Name()
{
   return "RomanPot";
}

//______________________________________________________________________________
const char *RomanPot::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RomanPot::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RomanPot::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RomanPot::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPot*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RomanPotContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RomanPotContainer::Class_Name()
{
   return "RomanPotContainer";
}

//______________________________________________________________________________
const char *RomanPotContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPotContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RomanPotContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPotContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RomanPotContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPotContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RomanPotContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RomanPotContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RHICfSimEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RHICfSimEvent::Class_Name()
{
   return "RHICfSimEvent";
}

//______________________________________________________________________________
const char *RHICfSimEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RHICfSimEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RHICfSimEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RHICfSimEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RHICfSimEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RHICfSimEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RHICfSimEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RHICfSimEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RunInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RunInfo::Class_Name()
{
   return "RunInfo";
}

//______________________________________________________________________________
const char *RunInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RunInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RunInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RunInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RunInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RunInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RunInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RunInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void RunInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class RunInfo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> RunNumber;
      R__b >> NumberOfEvents;
      { TString R__str; R__str.Streamer(R__b); Model = R__str.Data(); }
      R__b >> Seed1;
      R__b >> Seed2;
      flag.Streamer(R__b);
      R__b >> sigTot;
      R__b >> sigEla;
      R__b >> sigIne;
      R__b.CheckByteCount(R__s, R__c, RunInfo::IsA());
   } else {
      R__c = R__b.WriteVersion(RunInfo::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << RunNumber;
      R__b << NumberOfEvents;
      { TString R__str = Model.c_str(); R__str.Streamer(R__b);}
      R__b << Seed1;
      R__b << Seed2;
      flag.Streamer(R__b);
      R__b << sigTot;
      R__b << sigEla;
      R__b << sigIne;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RunInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RunInfo.
      TClass *R__cl = ::RunInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RunNumber", &RunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NumberOfEvents", &NumberOfEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Model", (void*)&Model);
      R__insp.InspectMember("string", (void*)&Model, "Model.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Seed1", &Seed1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Seed2", &Seed2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.InspectMember(flag, "flag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigTot", &sigTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigEla", &sigEla);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigIne", &sigIne);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RunInfo(void *p) {
      return  p ? new(p) ::RunInfo : new ::RunInfo;
   }
   static void *newArray_RunInfo(Long_t nElements, void *p) {
      return p ? new(p) ::RunInfo[nElements] : new ::RunInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_RunInfo(void *p) {
      delete ((::RunInfo*)p);
   }
   static void deleteArray_RunInfo(void *p) {
      delete [] ((::RunInfo*)p);
   }
   static void destruct_RunInfo(void *p) {
      typedef ::RunInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_RunInfo(TBuffer &buf, void *obj) {
      ((::RunInfo*)obj)->::RunInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::RunInfo

//______________________________________________________________________________
void RHICfSimEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class RHICfSimEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> forward;
      R__b >> central;
      R__b >> mc;
      R__b >> reco;
      R__b >> zdc;
      R__b >> bbc;
      R__b >> romanpot;
      R__b.CheckByteCount(R__s, R__c, RHICfSimEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(RHICfSimEvent::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << forward;
      R__b << central;
      R__b << mc;
      R__b << reco;
      R__b << zdc;
      R__b << bbc;
      R__b << romanpot;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RHICfSimEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RHICfSimEvent.
      TClass *R__cl = ::RHICfSimEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*forward", &forward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*central", &central);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mc", &mc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*reco", &reco);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zdc", &zdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bbc", &bbc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*romanpot", &romanpot);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RHICfSimEvent(void *p) {
      return  p ? new(p) ::RHICfSimEvent : new ::RHICfSimEvent;
   }
   static void *newArray_RHICfSimEvent(Long_t nElements, void *p) {
      return p ? new(p) ::RHICfSimEvent[nElements] : new ::RHICfSimEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_RHICfSimEvent(void *p) {
      delete ((::RHICfSimEvent*)p);
   }
   static void deleteArray_RHICfSimEvent(void *p) {
      delete [] ((::RHICfSimEvent*)p);
   }
   static void destruct_RHICfSimEvent(void *p) {
      typedef ::RHICfSimEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_RHICfSimEvent(TBuffer &buf, void *obj) {
      ((::RHICfSimEvent*)obj)->::RHICfSimEvent::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::RHICfSimEvent

//______________________________________________________________________________
void Central::Streamer(TBuffer &R__b)
{
   // Stream an object of class Central.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> id;
      R__b >> motherid;
      R__b >> pdgcode;
      momentum.Streamer(R__b);
      position1.Streamer(R__b);
      position2.Streamer(R__b);
      R__b >> isboundary;
      R__b.CheckByteCount(R__s, R__c, Central::IsA());
   } else {
      R__c = R__b.WriteVersion(Central::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << id;
      R__b << motherid;
      R__b << pdgcode;
      momentum.Streamer(R__b);
      position1.Streamer(R__b);
      position2.Streamer(R__b);
      R__b << isboundary;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Central::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Central.
      TClass *R__cl = ::Central::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "motherid", &motherid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgcode", &pdgcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentum", &momentum);
      R__insp.InspectMember(momentum, "momentum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "position1", &position1);
      R__insp.InspectMember(position1, "position1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "position2", &position2);
      R__insp.InspectMember(position2, "position2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isboundary", &isboundary);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Central(void *p) {
      return  p ? new(p) ::Central : new ::Central;
   }
   static void *newArray_Central(Long_t nElements, void *p) {
      return p ? new(p) ::Central[nElements] : new ::Central[nElements];
   }
   // Wrapper around operator delete
   static void delete_Central(void *p) {
      delete ((::Central*)p);
   }
   static void deleteArray_Central(void *p) {
      delete [] ((::Central*)p);
   }
   static void destruct_Central(void *p) {
      typedef ::Central current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Central(TBuffer &buf, void *obj) {
      ((::Central*)obj)->::Central::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::Central

//______________________________________________________________________________
void CentralContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class CentralContainer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<Central*> &R__stl =  centralCont;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(Central));
         if (R__tcl1==0) {
            Error("centralCont streamer","Missing the TClass object for Central!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            Central* R__t;
            R__t = (Central*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> process;
      R__b.CheckByteCount(R__s, R__c, CentralContainer::IsA());
   } else {
      R__c = R__b.WriteVersion(CentralContainer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<Central*> &R__stl =  centralCont;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Central*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << process;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void CentralContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CentralContainer.
      TClass *R__cl = ::CentralContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centralCont", (void*)&centralCont);
      R__insp.InspectMember("vector<Central*>", (void*)&centralCont, "centralCont.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "process", &process);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_CentralContainer(void *p) {
      return  p ? new(p) ::CentralContainer : new ::CentralContainer;
   }
   static void *newArray_CentralContainer(Long_t nElements, void *p) {
      return p ? new(p) ::CentralContainer[nElements] : new ::CentralContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_CentralContainer(void *p) {
      delete ((::CentralContainer*)p);
   }
   static void deleteArray_CentralContainer(void *p) {
      delete [] ((::CentralContainer*)p);
   }
   static void destruct_CentralContainer(void *p) {
      typedef ::CentralContainer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_CentralContainer(TBuffer &buf, void *obj) {
      ((::CentralContainer*)obj)->::CentralContainer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::CentralContainer

//______________________________________________________________________________
void Forward::Streamer(TBuffer &R__b)
{
   // Stream an object of class Forward.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> motherid;
      R__b >> pdgcode;
      momentum.Streamer(R__b);
      position.Streamer(R__b);
      R__b >> isbackground;
      R__b.CheckByteCount(R__s, R__c, Forward::IsA());
   } else {
      R__c = R__b.WriteVersion(Forward::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << motherid;
      R__b << pdgcode;
      momentum.Streamer(R__b);
      position.Streamer(R__b);
      R__b << isbackground;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Forward::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Forward.
      TClass *R__cl = ::Forward::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "motherid", &motherid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgcode", &pdgcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentum", &momentum);
      R__insp.InspectMember(momentum, "momentum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "position", &position);
      R__insp.InspectMember(position, "position.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isbackground", &isbackground);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Forward(void *p) {
      return  p ? new(p) ::Forward : new ::Forward;
   }
   static void *newArray_Forward(Long_t nElements, void *p) {
      return p ? new(p) ::Forward[nElements] : new ::Forward[nElements];
   }
   // Wrapper around operator delete
   static void delete_Forward(void *p) {
      delete ((::Forward*)p);
   }
   static void deleteArray_Forward(void *p) {
      delete [] ((::Forward*)p);
   }
   static void destruct_Forward(void *p) {
      typedef ::Forward current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Forward(TBuffer &buf, void *obj) {
      ((::Forward*)obj)->::Forward::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::Forward

//______________________________________________________________________________
void ForwardContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class ForwardContainer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<Forward*> &R__stl =  forwardCont;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(Forward));
         if (R__tcl1==0) {
            Error("forwardCont streamer","Missing the TClass object for Forward!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            Forward* R__t;
            R__t = (Forward*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, ForwardContainer::IsA());
   } else {
      R__c = R__b.WriteVersion(ForwardContainer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<Forward*> &R__stl =  forwardCont;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Forward*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ForwardContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ForwardContainer.
      TClass *R__cl = ::ForwardContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "forwardCont", (void*)&forwardCont);
      R__insp.InspectMember("vector<Forward*>", (void*)&forwardCont, "forwardCont.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ForwardContainer(void *p) {
      return  p ? new(p) ::ForwardContainer : new ::ForwardContainer;
   }
   static void *newArray_ForwardContainer(Long_t nElements, void *p) {
      return p ? new(p) ::ForwardContainer[nElements] : new ::ForwardContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_ForwardContainer(void *p) {
      delete ((::ForwardContainer*)p);
   }
   static void deleteArray_ForwardContainer(void *p) {
      delete [] ((::ForwardContainer*)p);
   }
   static void destruct_ForwardContainer(void *p) {
      typedef ::ForwardContainer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ForwardContainer(TBuffer &buf, void *obj) {
      ((::ForwardContainer*)obj)->::ForwardContainer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ForwardContainer

//______________________________________________________________________________
void RecoDataContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class RecoDataContainer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<std::vector<double> > &R__stl =  plate;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("plate streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<std::vector<std::vector<double> > > > &R__stl =  bar;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >));
         if (R__tcl1==0) {
            Error("bar streamer","Missing the TClass object for vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<std::vector<double> > > &R__stl =  unused;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("unused streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, RecoDataContainer::IsA());
   } else {
      R__c = R__b.WriteVersion(RecoDataContainer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<std::vector<double> > &R__stl =  plate;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("plate streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<std::vector<std::vector<double> > > > &R__stl =  bar;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >));
         if (R__tcl1==0) {
            Error("bar streamer","Missing the TClass object for vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >!");
            return;
         }
            vector<std::vector<std::vector<std::vector<double> > > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<std::vector<double> > > &R__stl =  unused;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("unused streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<std::vector<std::vector<double> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RecoDataContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RecoDataContainer.
      TClass *R__cl = ::RecoDataContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plate", (void*)&plate);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&plate, "plate.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bar", (void*)&bar);
      R__insp.InspectMember("vector<std::vector<std::vector<std::vector<double> > > >", (void*)&bar, "bar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "unused", (void*)&unused);
      R__insp.InspectMember("vector<std::vector<std::vector<double> > >", (void*)&unused, "unused.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RecoDataContainer(void *p) {
      return  p ? new(p) ::RecoDataContainer : new ::RecoDataContainer;
   }
   static void *newArray_RecoDataContainer(Long_t nElements, void *p) {
      return p ? new(p) ::RecoDataContainer[nElements] : new ::RecoDataContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_RecoDataContainer(void *p) {
      delete ((::RecoDataContainer*)p);
   }
   static void deleteArray_RecoDataContainer(void *p) {
      delete [] ((::RecoDataContainer*)p);
   }
   static void destruct_RecoDataContainer(void *p) {
      typedef ::RecoDataContainer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_RecoDataContainer(TBuffer &buf, void *obj) {
      ((::RecoDataContainer*)obj)->::RecoDataContainer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::RecoDataContainer

//______________________________________________________________________________
void MCDataContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCDataContainer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      RecoDataContainer::Streamer(R__b);
      {
         vector<std::vector<std::vector<std::vector<double> > > > &R__stl =  bar_truth;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >));
         if (R__tcl1==0) {
            Error("bar_truth streamer","Missing the TClass object for vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  plate_truth;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("plate_truth streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, MCDataContainer::IsA());
   } else {
      R__c = R__b.WriteVersion(MCDataContainer::IsA(), kTRUE);
      RecoDataContainer::Streamer(R__b);
      {
         vector<std::vector<std::vector<std::vector<double> > > > &R__stl =  bar_truth;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >));
         if (R__tcl1==0) {
            Error("bar_truth streamer","Missing the TClass object for vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >!");
            return;
         }
            vector<std::vector<std::vector<std::vector<double> > > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  plate_truth;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("plate_truth streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCDataContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCDataContainer.
      TClass *R__cl = ::MCDataContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bar_truth", (void*)&bar_truth);
      R__insp.InspectMember("vector<std::vector<std::vector<std::vector<double> > > >", (void*)&bar_truth, "bar_truth.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plate_truth", (void*)&plate_truth);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&plate_truth, "plate_truth.", false);
      RecoDataContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCDataContainer(void *p) {
      return  p ? new(p) ::MCDataContainer : new ::MCDataContainer;
   }
   static void *newArray_MCDataContainer(Long_t nElements, void *p) {
      return p ? new(p) ::MCDataContainer[nElements] : new ::MCDataContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCDataContainer(void *p) {
      delete ((::MCDataContainer*)p);
   }
   static void deleteArray_MCDataContainer(void *p) {
      delete [] ((::MCDataContainer*)p);
   }
   static void destruct_MCDataContainer(void *p) {
      typedef ::MCDataContainer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MCDataContainer(TBuffer &buf, void *obj) {
      ((::MCDataContainer*)obj)->::MCDataContainer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MCDataContainer

//______________________________________________________________________________
void BBC::Streamer(TBuffer &R__b)
{
   // Stream an object of class BBC.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> edep;
      {
         vector<BBCParticle*> &R__stl =  bbchit;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(BBCParticle));
         if (R__tcl1==0) {
            Error("bbchit streamer","Missing the TClass object for BBCParticle!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            BBCParticle* R__t;
            R__t = (BBCParticle*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, BBC::IsA());
   } else {
      R__c = R__b.WriteVersion(BBC::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << edep;
      {
         vector<BBCParticle*> &R__stl =  bbchit;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<BBCParticle*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void BBC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BBC.
      TClass *R__cl = ::BBC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep", &edep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bbchit", (void*)&bbchit);
      R__insp.InspectMember("vector<BBCParticle*>", (void*)&bbchit, "bbchit.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_BBC(void *p) {
      return  p ? new(p) ::BBC : new ::BBC;
   }
   static void *newArray_BBC(Long_t nElements, void *p) {
      return p ? new(p) ::BBC[nElements] : new ::BBC[nElements];
   }
   // Wrapper around operator delete
   static void delete_BBC(void *p) {
      delete ((::BBC*)p);
   }
   static void deleteArray_BBC(void *p) {
      delete [] ((::BBC*)p);
   }
   static void destruct_BBC(void *p) {
      typedef ::BBC current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_BBC(TBuffer &buf, void *obj) {
      ((::BBC*)obj)->::BBC::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::BBC

//______________________________________________________________________________
void BBCParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class BBCParticle.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> pdgcode;
      momentum.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, BBCParticle::IsA());
   } else {
      R__c = R__b.WriteVersion(BBCParticle::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << pdgcode;
      momentum.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void BBCParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BBCParticle.
      TClass *R__cl = ::BBCParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgcode", &pdgcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentum", &momentum);
      R__insp.InspectMember(momentum, "momentum.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_BBCParticle(void *p) {
      return  p ? new(p) ::BBCParticle : new ::BBCParticle;
   }
   static void *newArray_BBCParticle(Long_t nElements, void *p) {
      return p ? new(p) ::BBCParticle[nElements] : new ::BBCParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_BBCParticle(void *p) {
      delete ((::BBCParticle*)p);
   }
   static void deleteArray_BBCParticle(void *p) {
      delete [] ((::BBCParticle*)p);
   }
   static void destruct_BBCParticle(void *p) {
      typedef ::BBCParticle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_BBCParticle(TBuffer &buf, void *obj) {
      ((::BBCParticle*)obj)->::BBCParticle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::BBCParticle

//______________________________________________________________________________
void BBCContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class BBCContainer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<std::vector<BBC*> > &R__stl =  bbcCont;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<BBC*,allocator<BBC*> >));
         if (R__tcl1==0) {
            Error("bbcCont streamer","Missing the TClass object for vector<BBC*,allocator<BBC*> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<BBC*,allocator<BBC*> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, BBCContainer::IsA());
   } else {
      R__c = R__b.WriteVersion(BBCContainer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<std::vector<BBC*> > &R__stl =  bbcCont;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<BBC*,allocator<BBC*> >));
         if (R__tcl1==0) {
            Error("bbcCont streamer","Missing the TClass object for vector<BBC*,allocator<BBC*> >!");
            return;
         }
            vector<std::vector<BBC*> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<BBC*,allocator<BBC*> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void BBCContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BBCContainer.
      TClass *R__cl = ::BBCContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bbcCont", (void*)&bbcCont);
      R__insp.InspectMember("vector<std::vector<BBC*> >", (void*)&bbcCont, "bbcCont.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_BBCContainer(void *p) {
      return  p ? new(p) ::BBCContainer : new ::BBCContainer;
   }
   static void *newArray_BBCContainer(Long_t nElements, void *p) {
      return p ? new(p) ::BBCContainer[nElements] : new ::BBCContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_BBCContainer(void *p) {
      delete ((::BBCContainer*)p);
   }
   static void deleteArray_BBCContainer(void *p) {
      delete [] ((::BBCContainer*)p);
   }
   static void destruct_BBCContainer(void *p) {
      typedef ::BBCContainer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_BBCContainer(TBuffer &buf, void *obj) {
      ((::BBCContainer*)obj)->::BBCContainer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::BBCContainer

//______________________________________________________________________________
void ZDCContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class ZDCContainer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<double> &R__stl =  zdc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  nphoton;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  smd;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("smd streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  scin;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, ZDCContainer::IsA());
   } else {
      R__c = R__b.WriteVersion(ZDCContainer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<double> &R__stl =  zdc;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  nphoton;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  smd;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("smd streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<double> &R__stl =  scin;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ZDCContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ZDCContainer.
      TClass *R__cl = ::ZDCContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zdc", (void*)&zdc);
      R__insp.InspectMember("vector<double>", (void*)&zdc, "zdc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nphoton", (void*)&nphoton);
      R__insp.InspectMember("vector<int>", (void*)&nphoton, "nphoton.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "smd", (void*)&smd);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&smd, "smd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scin", (void*)&scin);
      R__insp.InspectMember("vector<double>", (void*)&scin, "scin.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ZDCContainer(void *p) {
      return  p ? new(p) ::ZDCContainer : new ::ZDCContainer;
   }
   static void *newArray_ZDCContainer(Long_t nElements, void *p) {
      return p ? new(p) ::ZDCContainer[nElements] : new ::ZDCContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_ZDCContainer(void *p) {
      delete ((::ZDCContainer*)p);
   }
   static void deleteArray_ZDCContainer(void *p) {
      delete [] ((::ZDCContainer*)p);
   }
   static void destruct_ZDCContainer(void *p) {
      typedef ::ZDCContainer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ZDCContainer(TBuffer &buf, void *obj) {
      ((::ZDCContainer*)obj)->::ZDCContainer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ZDCContainer

//______________________________________________________________________________
void RomanPot::Streamer(TBuffer &R__b)
{
   // Stream an object of class RomanPot.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> pdgcode;
      momentum.Streamer(R__b);
      position1.Streamer(R__b);
      position2.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, RomanPot::IsA());
   } else {
      R__c = R__b.WriteVersion(RomanPot::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << pdgcode;
      momentum.Streamer(R__b);
      position1.Streamer(R__b);
      position2.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RomanPot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RomanPot.
      TClass *R__cl = ::RomanPot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgcode", &pdgcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentum", &momentum);
      R__insp.InspectMember(momentum, "momentum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "position1", &position1);
      R__insp.InspectMember(position1, "position1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "position2", &position2);
      R__insp.InspectMember(position2, "position2.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RomanPot(void *p) {
      return  p ? new(p) ::RomanPot : new ::RomanPot;
   }
   static void *newArray_RomanPot(Long_t nElements, void *p) {
      return p ? new(p) ::RomanPot[nElements] : new ::RomanPot[nElements];
   }
   // Wrapper around operator delete
   static void delete_RomanPot(void *p) {
      delete ((::RomanPot*)p);
   }
   static void deleteArray_RomanPot(void *p) {
      delete [] ((::RomanPot*)p);
   }
   static void destruct_RomanPot(void *p) {
      typedef ::RomanPot current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_RomanPot(TBuffer &buf, void *obj) {
      ((::RomanPot*)obj)->::RomanPot::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::RomanPot

//______________________________________________________________________________
void RomanPotContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class RomanPotContainer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<RomanPot*> &R__stl =  romanpotCont;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(RomanPot));
         if (R__tcl1==0) {
            Error("romanpotCont streamer","Missing the TClass object for RomanPot!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            RomanPot* R__t;
            R__t = (RomanPot*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, RomanPotContainer::IsA());
   } else {
      R__c = R__b.WriteVersion(RomanPotContainer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<RomanPot*> &R__stl =  romanpotCont;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<RomanPot*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RomanPotContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RomanPotContainer.
      TClass *R__cl = ::RomanPotContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "romanpotCont", (void*)&romanpotCont);
      R__insp.InspectMember("vector<RomanPot*>", (void*)&romanpotCont, "romanpotCont.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RomanPotContainer(void *p) {
      return  p ? new(p) ::RomanPotContainer : new ::RomanPotContainer;
   }
   static void *newArray_RomanPotContainer(Long_t nElements, void *p) {
      return p ? new(p) ::RomanPotContainer[nElements] : new ::RomanPotContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_RomanPotContainer(void *p) {
      delete ((::RomanPotContainer*)p);
   }
   static void deleteArray_RomanPotContainer(void *p) {
      delete [] ((::RomanPotContainer*)p);
   }
   static void destruct_RomanPotContainer(void *p) {
      typedef ::RomanPotContainer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_RomanPotContainer(TBuffer &buf, void *obj) {
      ((::RomanPotContainer*)obj)->::RomanPotContainer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::RomanPotContainer

//______________________________________________________________________________
void Flag::Streamer(TBuffer &R__b)
{
   // Stream an object of class Flag.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> mFlag;
      R__b.CheckByteCount(R__s, R__c, Flag::IsA());
   } else {
      R__c = R__b.WriteVersion(Flag::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << mFlag;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Flag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Flag.
      TClass *R__cl = ::Flag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mFlag", &mFlag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Flag(void *p) {
      return  p ? new(p) ::Flag : new ::Flag;
   }
   static void *newArray_Flag(Long_t nElements, void *p) {
      return p ? new(p) ::Flag[nElements] : new ::Flag[nElements];
   }
   // Wrapper around operator delete
   static void delete_Flag(void *p) {
      delete ((::Flag*)p);
   }
   static void deleteArray_Flag(void *p) {
      delete [] ((::Flag*)p);
   }
   static void destruct_Flag(void *p) {
      typedef ::Flag current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Flag(TBuffer &buf, void *obj) {
      ((::Flag*)obj)->::Flag::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::Flag

namespace ROOTDict {
   void vectorlEBBCmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEBBCmUgR_Dictionary();
   static void *new_vectorlEBBCmUgR(void *p = 0);
   static void *newArray_vectorlEBBCmUgR(Long_t size, void *p);
   static void delete_vectorlEBBCmUgR(void *p);
   static void deleteArray_vectorlEBBCmUgR(void *p);
   static void destruct_vectorlEBBCmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<BBC*>*)
   {
      vector<BBC*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<BBC*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<BBC*>", -2, "prec_stl/vector", 49,
                  typeid(vector<BBC*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEBBCmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<BBC*>) );
      instance.SetNew(&new_vectorlEBBCmUgR);
      instance.SetNewArray(&newArray_vectorlEBBCmUgR);
      instance.SetDelete(&delete_vectorlEBBCmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEBBCmUgR);
      instance.SetDestructor(&destruct_vectorlEBBCmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<BBC*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<BBC*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEBBCmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<BBC*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEBBCmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<BBC*> : new vector<BBC*>;
   }
   static void *newArray_vectorlEBBCmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<BBC*>[nElements] : new vector<BBC*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEBBCmUgR(void *p) {
      delete ((vector<BBC*>*)p);
   }
   static void deleteArray_vectorlEBBCmUgR(void *p) {
      delete [] ((vector<BBC*>*)p);
   }
   static void destruct_vectorlEBBCmUgR(void *p) {
      typedef vector<BBC*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<BBC*>

namespace ROOTDict {
   void vectorlEBBCParticlemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEBBCParticlemUgR_Dictionary();
   static void *new_vectorlEBBCParticlemUgR(void *p = 0);
   static void *newArray_vectorlEBBCParticlemUgR(Long_t size, void *p);
   static void delete_vectorlEBBCParticlemUgR(void *p);
   static void deleteArray_vectorlEBBCParticlemUgR(void *p);
   static void destruct_vectorlEBBCParticlemUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<BBCParticle*>*)
   {
      vector<BBCParticle*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<BBCParticle*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<BBCParticle*>", -2, "prec_stl/vector", 49,
                  typeid(vector<BBCParticle*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEBBCParticlemUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<BBCParticle*>) );
      instance.SetNew(&new_vectorlEBBCParticlemUgR);
      instance.SetNewArray(&newArray_vectorlEBBCParticlemUgR);
      instance.SetDelete(&delete_vectorlEBBCParticlemUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEBBCParticlemUgR);
      instance.SetDestructor(&destruct_vectorlEBBCParticlemUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<BBCParticle*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<BBCParticle*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEBBCParticlemUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<BBCParticle*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEBBCParticlemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<BBCParticle*> : new vector<BBCParticle*>;
   }
   static void *newArray_vectorlEBBCParticlemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<BBCParticle*>[nElements] : new vector<BBCParticle*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEBBCParticlemUgR(void *p) {
      delete ((vector<BBCParticle*>*)p);
   }
   static void deleteArray_vectorlEBBCParticlemUgR(void *p) {
      delete [] ((vector<BBCParticle*>*)p);
   }
   static void destruct_vectorlEBBCParticlemUgR(void *p) {
      typedef vector<BBCParticle*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<BBCParticle*>

namespace ROOTDict {
   void vectorlECentralmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlECentralmUgR_Dictionary();
   static void *new_vectorlECentralmUgR(void *p = 0);
   static void *newArray_vectorlECentralmUgR(Long_t size, void *p);
   static void delete_vectorlECentralmUgR(void *p);
   static void deleteArray_vectorlECentralmUgR(void *p);
   static void destruct_vectorlECentralmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<Central*>*)
   {
      vector<Central*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Central*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Central*>", -2, "prec_stl/vector", 49,
                  typeid(vector<Central*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlECentralmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Central*>) );
      instance.SetNew(&new_vectorlECentralmUgR);
      instance.SetNewArray(&newArray_vectorlECentralmUgR);
      instance.SetDelete(&delete_vectorlECentralmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlECentralmUgR);
      instance.SetDestructor(&destruct_vectorlECentralmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<Central*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Central*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlECentralmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<Central*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlECentralmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Central*> : new vector<Central*>;
   }
   static void *newArray_vectorlECentralmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Central*>[nElements] : new vector<Central*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlECentralmUgR(void *p) {
      delete ((vector<Central*>*)p);
   }
   static void deleteArray_vectorlECentralmUgR(void *p) {
      delete [] ((vector<Central*>*)p);
   }
   static void destruct_vectorlECentralmUgR(void *p) {
      typedef vector<Central*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<Central*>

namespace ROOTDict {
   void vectorlEForwardmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEForwardmUgR_Dictionary();
   static void *new_vectorlEForwardmUgR(void *p = 0);
   static void *newArray_vectorlEForwardmUgR(Long_t size, void *p);
   static void delete_vectorlEForwardmUgR(void *p);
   static void deleteArray_vectorlEForwardmUgR(void *p);
   static void destruct_vectorlEForwardmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<Forward*>*)
   {
      vector<Forward*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Forward*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Forward*>", -2, "prec_stl/vector", 49,
                  typeid(vector<Forward*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEForwardmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Forward*>) );
      instance.SetNew(&new_vectorlEForwardmUgR);
      instance.SetNewArray(&newArray_vectorlEForwardmUgR);
      instance.SetDelete(&delete_vectorlEForwardmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEForwardmUgR);
      instance.SetDestructor(&destruct_vectorlEForwardmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<Forward*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Forward*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEForwardmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<Forward*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEForwardmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Forward*> : new vector<Forward*>;
   }
   static void *newArray_vectorlEForwardmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Forward*>[nElements] : new vector<Forward*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEForwardmUgR(void *p) {
      delete ((vector<Forward*>*)p);
   }
   static void deleteArray_vectorlEForwardmUgR(void *p) {
      delete [] ((vector<Forward*>*)p);
   }
   static void destruct_vectorlEForwardmUgR(void *p) {
      typedef vector<Forward*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<Forward*>

namespace ROOTDict {
   void vectorlERomanPotmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlERomanPotmUgR_Dictionary();
   static void *new_vectorlERomanPotmUgR(void *p = 0);
   static void *newArray_vectorlERomanPotmUgR(Long_t size, void *p);
   static void delete_vectorlERomanPotmUgR(void *p);
   static void deleteArray_vectorlERomanPotmUgR(void *p);
   static void destruct_vectorlERomanPotmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<RomanPot*>*)
   {
      vector<RomanPot*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<RomanPot*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<RomanPot*>", -2, "prec_stl/vector", 49,
                  typeid(vector<RomanPot*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlERomanPotmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<RomanPot*>) );
      instance.SetNew(&new_vectorlERomanPotmUgR);
      instance.SetNewArray(&newArray_vectorlERomanPotmUgR);
      instance.SetDelete(&delete_vectorlERomanPotmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlERomanPotmUgR);
      instance.SetDestructor(&destruct_vectorlERomanPotmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<RomanPot*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<RomanPot*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERomanPotmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<RomanPot*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlERomanPotmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RomanPot*> : new vector<RomanPot*>;
   }
   static void *newArray_vectorlERomanPotmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RomanPot*>[nElements] : new vector<RomanPot*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERomanPotmUgR(void *p) {
      delete ((vector<RomanPot*>*)p);
   }
   static void deleteArray_vectorlERomanPotmUgR(void *p) {
      delete [] ((vector<RomanPot*>*)p);
   }
   static void destruct_vectorlERomanPotmUgR(void *p) {
      typedef vector<RomanPot*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<RomanPot*>

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

namespace ROOTDict {
   void vectorlEvectorlEBBCmUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEBBCmUgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEBBCmUgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEBBCmUgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEBBCmUgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEBBCmUgRsPgR(void *p);
   static void destruct_vectorlEvectorlEBBCmUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<BBC*> >*)
   {
      vector<vector<BBC*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<BBC*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<BBC*> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<BBC*> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEBBCmUgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<BBC*> >) );
      instance.SetNew(&new_vectorlEvectorlEBBCmUgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEBBCmUgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEBBCmUgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEBBCmUgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEBBCmUgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<BBC*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<BBC*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEBBCmUgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<BBC*> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEBBCmUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<BBC*> > : new vector<vector<BBC*> >;
   }
   static void *newArray_vectorlEvectorlEBBCmUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<BBC*> >[nElements] : new vector<vector<BBC*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEBBCmUgRsPgR(void *p) {
      delete ((vector<vector<BBC*> >*)p);
   }
   static void deleteArray_vectorlEvectorlEBBCmUgRsPgR(void *p) {
      delete [] ((vector<vector<BBC*> >*)p);
   }
   static void destruct_vectorlEvectorlEBBCmUgRsPgR(void *p) {
      typedef vector<vector<BBC*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<BBC*> >

namespace ROOTDict {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<double> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<double> >

namespace ROOTDict {
   void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<double> > >*)
   {
      vector<vector<vector<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<double> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<double> > >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<vector<double> > >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<double> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<vector<double> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > > : new vector<vector<vector<double> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > >[nElements] : new vector<vector<vector<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<double> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<double> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      typedef vector<vector<vector<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<vector<double> > >

namespace ROOTDict {
   void vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<vector<double> > > >*)
   {
      vector<vector<vector<vector<double> > > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<vector<double> > > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<vector<double> > > >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<vector<vector<double> > > >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<vector<double> > > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<vector<vector<double> > > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<vector<double> > > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<vector<vector<double> > > >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<vector<double> > > > : new vector<vector<vector<vector<double> > > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<vector<double> > > >[nElements] : new vector<vector<vector<vector<double> > > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<vector<double> > > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<vector<double> > > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEvectorlEdoublegRsPgRsPgRsPgR(void *p) {
      typedef vector<vector<vector<vector<double> > > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<vector<vector<double> > > >

/********************************************************
* dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtabledict();

extern "C" void G__set_cpp_environmentdict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("BBC.hpp");
  G__add_compiledheader("BBCContainer.hpp");
  G__add_compiledheader("BBCParticle.hpp");
  G__add_compiledheader("Central.hpp");
  G__add_compiledheader("CentralContainer.hpp");
  G__add_compiledheader("Flag.hpp");
  G__add_compiledheader("Forward.hpp");
  G__add_compiledheader("ForwardContainer.hpp");
  G__add_compiledheader("MCDataContainer.hpp");
  G__add_compiledheader("RHICfParam.hpp");
  G__add_compiledheader("RHICfSimEvent.hpp");
  G__add_compiledheader("RecoDataContainer.hpp");
  G__add_compiledheader("RomanPot.hpp");
  G__add_compiledheader("RomanPotContainer.hpp");
  G__add_compiledheader("RunInfo.hpp");
  G__add_compiledheader("ZDCContainer.hpp");
  G__cpp_reset_tagtabledict();
}
#include <new>
extern "C" int G__cpp_dllrevdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* BBCParticle */
static int G__dict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BBCParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BBCParticle[n];
     } else {
       p = new((void*) gvp) BBCParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BBCParticle;
     } else {
       p = new((void*) gvp) BBCParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_BBCParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBCParticle*) G__getstructoffset())->SetPDGCode((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBCParticle*) G__getstructoffset())->SetMomentum(*((TLorentzVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((BBCParticle*) G__getstructoffset())->GetPDGCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((BBCParticle*) G__getstructoffset())->GetMomentum();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BBCParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBCParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BBCParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BBCParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBCParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBCParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BBCParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBCParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BBCParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BBCParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BBCParticle(*(BBCParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_BBCParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BBCParticle G__TBBCParticle;
static int G__dict_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BBCParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BBCParticle*) (soff+(sizeof(BBCParticle)*i)))->~G__TBBCParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BBCParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BBCParticle*) (soff))->~G__TBBCParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BBCParticle* dest = (BBCParticle*) G__getstructoffset();
   *dest = *(BBCParticle*) libp->para[0].ref;
   const BBCParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Flag */
static int G__dict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Flag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Flag[n];
     } else {
       p = new((void*) gvp) Flag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Flag;
     } else {
       p = new((void*) gvp) Flag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_Flag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Flag*) G__getstructoffset())->equal((unsigned char) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Flag*) G__getstructoffset())->check((unsigned char) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Flag*) G__getstructoffset())->set((unsigned char) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Flag*) G__getstructoffset())->reset((unsigned char) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Flag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Flag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Flag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Flag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Flag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Flag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Flag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Flag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Flag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Flag* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Flag(*(Flag*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_Flag));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Flag G__TFlag;
static int G__dict_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Flag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Flag*) (soff+(sizeof(Flag)*i)))->~G__TFlag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Flag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Flag*) (soff))->~G__TFlag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Flag* dest = (Flag*) G__getstructoffset();
   *dest = *(Flag*) libp->para[0].ref;
   const Flag& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BBC */
static int G__dict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BBC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BBC[n];
     } else {
       p = new((void*) gvp) BBC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BBC;
     } else {
       p = new((void*) gvp) BBC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_BBC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BBC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new BBC(*(BBC*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) BBC(*(BBC*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_BBC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBC*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBC*) G__getstructoffset())->SetEdep((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBC*) G__getstructoffset())->SetHit(*((vector<BBCParticle*>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((BBC*) G__getstructoffset())->GetEdep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<BBCParticle*>* pobj;
         vector<BBCParticle*> xobj = ((BBC*) G__getstructoffset())->GetHit();
         pobj = new vector<BBCParticle*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BBC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BBC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BBC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BBC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_229_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BBC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BBC G__TBBC;
static int G__dict_229_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BBC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BBC*) (soff+(sizeof(BBC)*i)))->~G__TBBC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BBC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BBC*) (soff))->~G__TBBC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_229_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BBC* dest = (BBC*) G__getstructoffset();
   *dest = *(BBC*) libp->para[0].ref;
   const BBC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BBCContainer */
static int G__dict_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BBCContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BBCContainer[n];
     } else {
       p = new((void*) gvp) BBCContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BBCContainer;
     } else {
       p = new((void*) gvp) BBCContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_BBCContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBCContainer*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBCContainer*) G__getstructoffset())->SetBBC((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BBC*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::vector<BBC*> >* pobj;
         vector<std::vector<BBC*> > xobj = ((BBCContainer*) G__getstructoffset())->GetContainer();
         pobj = new vector<std::vector<BBC*> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BBCContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBCContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BBCContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BBCContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BBCContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBCContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BBCContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BBCContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BBCContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_234_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BBCContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BBCContainer(*(BBCContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_BBCContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BBCContainer G__TBBCContainer;
static int G__dict_234_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BBCContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BBCContainer*) (soff+(sizeof(BBCContainer)*i)))->~G__TBBCContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BBCContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BBCContainer*) (soff))->~G__TBBCContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_234_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BBCContainer* dest = (BBCContainer*) G__getstructoffset();
   *dest = *(BBCContainer*) libp->para[0].ref;
   const BBCContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Central */
static int G__dict_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Central* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Central[n];
     } else {
       p = new((void*) gvp) Central[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Central;
     } else {
       p = new((void*) gvp) Central;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_Central));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->SetMotherID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->SetPDGcode((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->SetMomentum(*((TLorentzVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->SetPosition1(*((TVector3*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->SetPosition2(*((TVector3*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->SetBoundary((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Central*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Central*) G__getstructoffset())->GetMotherID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Central*) G__getstructoffset())->GetPDGcode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Central*) G__getstructoffset())->GetMomentum();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((Central*) G__getstructoffset())->GetPosition1();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((Central*) G__getstructoffset())->GetPosition2();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Central*) G__getstructoffset())->isBoundary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Central::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Central::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Central::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Central::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Central*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Central::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Central::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Central::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_243_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Central::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_243_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Central* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Central(*(Central*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_Central));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Central G__TCentral;
static int G__dict_243_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Central*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Central*) (soff+(sizeof(Central)*i)))->~G__TCentral();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Central*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Central*) (soff))->~G__TCentral();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_243_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Central* dest = (Central*) G__getstructoffset();
   *dest = *(Central*) libp->para[0].ref;
   const Central& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CentralContainer */
static int G__dict_244_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CentralContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CentralContainer[n];
     } else {
       p = new((void*) gvp) CentralContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CentralContainer;
     } else {
       p = new((void*) gvp) CentralContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_CentralContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CentralContainer*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CentralContainer*) G__getstructoffset())->Push_back((Central*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Central*>* pobj;
         vector<Central*> xobj = ((CentralContainer*) G__getstructoffset())->GetContainer();
         pobj = new vector<Central*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CentralContainer*) G__getstructoffset())->SetProcess((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CentralContainer*) G__getstructoffset())->GetProcess());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CentralContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CentralContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CentralContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CentralContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CentralContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CentralContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CentralContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CentralContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CentralContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_244_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CentralContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CentralContainer(*(CentralContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_CentralContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CentralContainer G__TCentralContainer;
static int G__dict_244_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CentralContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CentralContainer*) (soff+(sizeof(CentralContainer)*i)))->~G__TCentralContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CentralContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CentralContainer*) (soff))->~G__TCentralContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_244_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CentralContainer* dest = (CentralContainer*) G__getstructoffset();
   *dest = *(CentralContainer*) libp->para[0].ref;
   const CentralContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Forward */
static int G__dict_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Forward* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Forward[n];
     } else {
       p = new((void*) gvp) Forward[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Forward;
     } else {
       p = new((void*) gvp) Forward;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_Forward));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Forward*) G__getstructoffset())->SetMotherID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Forward*) G__getstructoffset())->SetPDGcode((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Forward*) G__getstructoffset())->SetMomentum(*((TLorentzVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Forward*) G__getstructoffset())->SetPosition(*((TVector3*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Forward*) G__getstructoffset())->SetIsBackground((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Forward*) G__getstructoffset())->GetMotherID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Forward*) G__getstructoffset())->GetPDGcode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Forward*) G__getstructoffset())->GetMomentum();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((Forward*) G__getstructoffset())->GetPosition();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Forward*) G__getstructoffset())->IsBackground());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Forward::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Forward::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Forward::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Forward::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Forward*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Forward::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Forward::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Forward::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_249_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Forward::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_249_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Forward* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Forward(*(Forward*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_Forward));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Forward G__TForward;
static int G__dict_249_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Forward*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Forward*) (soff+(sizeof(Forward)*i)))->~G__TForward();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Forward*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Forward*) (soff))->~G__TForward();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_249_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Forward* dest = (Forward*) G__getstructoffset();
   *dest = *(Forward*) libp->para[0].ref;
   const Forward& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ForwardContainer */
static int G__dict_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ForwardContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ForwardContainer[n];
     } else {
       p = new((void*) gvp) ForwardContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ForwardContainer;
     } else {
       p = new((void*) gvp) ForwardContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_ForwardContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ForwardContainer*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ForwardContainer*) G__getstructoffset())->Push_back((Forward*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Forward*>* pobj;
         vector<Forward*> xobj = ((ForwardContainer*) G__getstructoffset())->GetContainer();
         pobj = new vector<Forward*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ForwardContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ForwardContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ForwardContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ForwardContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ForwardContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ForwardContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ForwardContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ForwardContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_250_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ForwardContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_250_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ForwardContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ForwardContainer(*(ForwardContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_ForwardContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ForwardContainer G__TForwardContainer;
static int G__dict_250_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ForwardContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ForwardContainer*) (soff+(sizeof(ForwardContainer)*i)))->~G__TForwardContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ForwardContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ForwardContainer*) (soff))->~G__TForwardContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_250_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ForwardContainer* dest = (ForwardContainer*) G__getstructoffset();
   *dest = *(ForwardContainer*) libp->para[0].ref;
   const ForwardContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RecoDataContainer */
static int G__dict_255_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoDataContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoDataContainer[n];
     } else {
       p = new((void*) gvp) RecoDataContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoDataContainer;
     } else {
       p = new((void*) gvp) RecoDataContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RecoDataContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoDataContainer*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoDataContainer*) G__getstructoffset())->GetMaxBar((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoDataContainer*) G__getstructoffset())->GetBeltSum((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoDataContainer*) G__getstructoffset())->GetLayerSum((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoDataContainer*) G__getstructoffset())->GetMaxLayerSum((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoDataContainer*) G__getstructoffset())->SetPlate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoDataContainer*) G__getstructoffset())->SetBar((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoDataContainer*) G__getstructoffset())->SetUnused((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::vector<double> >* pobj;
         vector<std::vector<double> > xobj = ((RecoDataContainer*) G__getstructoffset())->GetPlate();
         pobj = new vector<std::vector<double> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::vector<std::vector<std::vector<double> > > >* pobj;
         vector<std::vector<std::vector<std::vector<double> > > > xobj = ((RecoDataContainer*) G__getstructoffset())->GetBar();
         pobj = new vector<std::vector<std::vector<std::vector<double> > > >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::vector<std::vector<double> > >* pobj;
         vector<std::vector<std::vector<double> > > xobj = ((RecoDataContainer*) G__getstructoffset())->GetUnused();
         pobj = new vector<std::vector<std::vector<double> > >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RecoDataContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RecoDataContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RecoDataContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RecoDataContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoDataContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RecoDataContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RecoDataContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RecoDataContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_255_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RecoDataContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_255_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RecoDataContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RecoDataContainer(*(RecoDataContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RecoDataContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RecoDataContainer G__TRecoDataContainer;
static int G__dict_255_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RecoDataContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RecoDataContainer*) (soff+(sizeof(RecoDataContainer)*i)))->~G__TRecoDataContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RecoDataContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RecoDataContainer*) (soff))->~G__TRecoDataContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_255_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoDataContainer* dest = (RecoDataContainer*) G__getstructoffset();
   *dest = *(RecoDataContainer*) libp->para[0].ref;
   const RecoDataContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCDataContainer */
static int G__dict_268_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCDataContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCDataContainer[n];
     } else {
       p = new((void*) gvp) MCDataContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCDataContainer;
     } else {
       p = new((void*) gvp) MCDataContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_MCDataContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCDataContainer*) G__getstructoffset())->SetBarTruth((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::vector<std::vector<std::vector<double> > > >* pobj;
         vector<std::vector<std::vector<std::vector<double> > > > xobj = ((MCDataContainer*) G__getstructoffset())->GetBarTruth();
         pobj = new vector<std::vector<std::vector<std::vector<double> > > >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCDataContainer*) G__getstructoffset())->SetPlateTruth((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::vector<double> >* pobj;
         vector<std::vector<double> > xobj = ((MCDataContainer*) G__getstructoffset())->GetPlateTruth();
         pobj = new vector<std::vector<double> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCDataContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCDataContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCDataContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCDataContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCDataContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCDataContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCDataContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCDataContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_268_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCDataContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_268_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCDataContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCDataContainer(*(MCDataContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_MCDataContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCDataContainer G__TMCDataContainer;
static int G__dict_268_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCDataContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCDataContainer*) (soff+(sizeof(MCDataContainer)*i)))->~G__TMCDataContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCDataContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCDataContainer*) (soff))->~G__TMCDataContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_268_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCDataContainer* dest = (MCDataContainer*) G__getstructoffset();
   *dest = *(MCDataContainer*) libp->para[0].ref;
   const MCDataContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ZDCContainer */
static int G__dict_269_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ZDCContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ZDCContainer[n];
     } else {
       p = new((void*) gvp) ZDCContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ZDCContainer;
     } else {
       p = new((void*) gvp) ZDCContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_ZDCContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZDCContainer*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ZDCContainer*) G__getstructoffset())->GetMaxModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((ZDCContainer*) G__getstructoffset())->GetSumModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZDCContainer*) G__getstructoffset())->SetZDC((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZDCContainer*) G__getstructoffset())->SetNphoton((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZDCContainer*) G__getstructoffset())->SetSMD((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZDCContainer*) G__getstructoffset())->SetScin((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<double>* pobj;
         vector<double> xobj = ((ZDCContainer*) G__getstructoffset())->GetZDC();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((ZDCContainer*) G__getstructoffset())->GetNphoton();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::vector<double> >* pobj;
         vector<std::vector<double> > xobj = ((ZDCContainer*) G__getstructoffset())->GetSMD();
         pobj = new vector<std::vector<double> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<double>* pobj;
         vector<double> xobj = ((ZDCContainer*) G__getstructoffset())->GetScin();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ZDCContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ZDCContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ZDCContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ZDCContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZDCContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ZDCContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ZDCContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ZDCContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_269_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ZDCContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_269_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ZDCContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ZDCContainer(*(ZDCContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_ZDCContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ZDCContainer G__TZDCContainer;
static int G__dict_269_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ZDCContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ZDCContainer*) (soff+(sizeof(ZDCContainer)*i)))->~G__TZDCContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ZDCContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ZDCContainer*) (soff))->~G__TZDCContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_269_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ZDCContainer* dest = (ZDCContainer*) G__getstructoffset();
   *dest = *(ZDCContainer*) libp->para[0].ref;
   const ZDCContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RomanPot */
static int G__dict_274_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RomanPot* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RomanPot[n];
     } else {
       p = new((void*) gvp) RomanPot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RomanPot;
     } else {
       p = new((void*) gvp) RomanPot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RomanPot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPot*) G__getstructoffset())->SetPDGcode((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPot*) G__getstructoffset())->SetMomentum(*((TLorentzVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPot*) G__getstructoffset())->SetPosition1(*((TVector3*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPot*) G__getstructoffset())->SetPosition2(*((TVector3*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RomanPot*) G__getstructoffset())->GetPDGcode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((RomanPot*) G__getstructoffset())->GetMomentum();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((RomanPot*) G__getstructoffset())->GetPosition1();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((RomanPot*) G__getstructoffset())->GetPosition2();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RomanPot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RomanPot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RomanPot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RomanPot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RomanPot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RomanPot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RomanPot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_274_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RomanPot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_274_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RomanPot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RomanPot(*(RomanPot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RomanPot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RomanPot G__TRomanPot;
static int G__dict_274_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RomanPot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RomanPot*) (soff+(sizeof(RomanPot)*i)))->~G__TRomanPot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RomanPot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RomanPot*) (soff))->~G__TRomanPot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_274_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RomanPot* dest = (RomanPot*) G__getstructoffset();
   *dest = *(RomanPot*) libp->para[0].ref;
   const RomanPot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RomanPotContainer */
static int G__dict_275_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RomanPotContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RomanPotContainer[n];
     } else {
       p = new((void*) gvp) RomanPotContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RomanPotContainer;
     } else {
       p = new((void*) gvp) RomanPotContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RomanPotContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPotContainer*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPotContainer*) G__getstructoffset())->Push_back((RomanPot*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RomanPot*>* pobj;
         vector<RomanPot*> xobj = ((RomanPotContainer*) G__getstructoffset())->GetContainer();
         pobj = new vector<RomanPot*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RomanPotContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RomanPotContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RomanPotContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RomanPotContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RomanPotContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RomanPotContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RomanPotContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RomanPotContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RomanPotContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_275_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RomanPotContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RomanPotContainer(*(RomanPotContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RomanPotContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RomanPotContainer G__TRomanPotContainer;
static int G__dict_275_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RomanPotContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RomanPotContainer*) (soff+(sizeof(RomanPotContainer)*i)))->~G__TRomanPotContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RomanPotContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RomanPotContainer*) (soff))->~G__TRomanPotContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_275_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RomanPotContainer* dest = (RomanPotContainer*) G__getstructoffset();
   *dest = *(RomanPotContainer*) libp->para[0].ref;
   const RomanPotContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RHICfSimEvent */
static int G__dict_280_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RHICfSimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RHICfSimEvent[n];
     } else {
       p = new((void*) gvp) RHICfSimEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RHICfSimEvent;
     } else {
       p = new((void*) gvp) RHICfSimEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RHICfSimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->SetForward((ForwardContainer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->SetCentral((CentralContainer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->SetMC((MCDataContainer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->SetReco((RecoDataContainer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->SetZDC((ZDCContainer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->SetBBC((BBCContainer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->SetRomanPot((RomanPotContainer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RHICfSimEvent*) G__getstructoffset())->GetForward());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RHICfSimEvent*) G__getstructoffset())->GetCentral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RHICfSimEvent*) G__getstructoffset())->GetMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RHICfSimEvent*) G__getstructoffset())->GetReco());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RHICfSimEvent*) G__getstructoffset())->GetZDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RHICfSimEvent*) G__getstructoffset())->GetBBC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RHICfSimEvent*) G__getstructoffset())->GetRomanPot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RHICfSimEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHICfSimEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RHICfSimEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RHICfSimEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHICfSimEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHICfSimEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RHICfSimEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHICfSimEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_280_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RHICfSimEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_280_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RHICfSimEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RHICfSimEvent(*(RHICfSimEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RHICfSimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RHICfSimEvent G__TRHICfSimEvent;
static int G__dict_280_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RHICfSimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RHICfSimEvent*) (soff+(sizeof(RHICfSimEvent)*i)))->~G__TRHICfSimEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RHICfSimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RHICfSimEvent*) (soff))->~G__TRHICfSimEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_280_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RHICfSimEvent* dest = (RHICfSimEvent*) G__getstructoffset();
   *dest = *(RHICfSimEvent*) libp->para[0].ref;
   const RHICfSimEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RunInfo */
static int G__dict_281_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RunInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunInfo[n];
     } else {
       p = new((void*) gvp) RunInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunInfo;
     } else {
       p = new((void*) gvp) RunInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetRunNumber((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetNumberOfEvents((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetModel(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetSeed1((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetSeed2((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetFlag(*((Flag*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetSigTot((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetSigEla((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->SetSigIne((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RunInfo*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RunInfo*) G__getstructoffset())->GetNumberOfEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((RunInfo*) G__getstructoffset())->GetModel();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RunInfo*) G__getstructoffset())->GetSeed1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RunInfo*) G__getstructoffset())->GetSeed2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Flag* pobj;
         Flag xobj = ((RunInfo*) G__getstructoffset())->GetFlag();
         pobj = new Flag(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RunInfo*) G__getstructoffset())->GetSigTot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RunInfo*) G__getstructoffset())->GetSigEla());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RunInfo*) G__getstructoffset())->GetSigIne());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RunInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RunInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RunInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RunInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dict_281_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RunInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dict_281_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RunInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RunInfo(*(RunInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictLN_RunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RunInfo G__TRunInfo;
static int G__dict_281_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RunInfo*) (soff+(sizeof(RunInfo)*i)))->~G__TRunInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RunInfo*) (soff))->~G__TRunInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dict_281_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RunInfo* dest = (RunInfo*) G__getstructoffset();
   *dest = *(RunInfo*) libp->para[0].ref;
   const RunInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* BBCParticle */

/* Flag */

/* BBC */

/* BBCContainer */

/* Central */

/* CentralContainer */

/* Forward */

/* ForwardContainer */

/* RecoDataContainer */

/* MCDataContainer */

/* ZDCContainer */

/* RomanPot */

/* RomanPotContainer */

/* RHICfSimEvent */

/* RunInfo */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncdict {
 public:
  G__Sizep2memfuncdict(): p(&G__Sizep2memfuncdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncdict::*p)();
};

size_t G__get_sizep2memfuncdict()
{
  G__Sizep2memfuncdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancedict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_BBCParticle))) {
     BBCParticle *G__Lderived;
     G__Lderived=(BBCParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_BBCParticle),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_Flag))) {
     Flag *G__Lderived;
     G__Lderived=(Flag*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_Flag),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_BBC))) {
     BBC *G__Lderived;
     G__Lderived=(BBC*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_BBC),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_BBCContainer))) {
     BBCContainer *G__Lderived;
     G__Lderived=(BBCContainer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_BBCContainer),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_Central))) {
     Central *G__Lderived;
     G__Lderived=(Central*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_Central),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_CentralContainer))) {
     CentralContainer *G__Lderived;
     G__Lderived=(CentralContainer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_CentralContainer),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_Forward))) {
     Forward *G__Lderived;
     G__Lderived=(Forward*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_Forward),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_ForwardContainer))) {
     ForwardContainer *G__Lderived;
     G__Lderived=(ForwardContainer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_ForwardContainer),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_RecoDataContainer))) {
     RecoDataContainer *G__Lderived;
     G__Lderived=(RecoDataContainer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_RecoDataContainer),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_MCDataContainer))) {
     MCDataContainer *G__Lderived;
     G__Lderived=(MCDataContainer*)0x1000;
     {
       RecoDataContainer *G__Lpbase=(RecoDataContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_MCDataContainer),G__get_linked_tagnum(&G__dictLN_RecoDataContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_MCDataContainer),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_ZDCContainer))) {
     ZDCContainer *G__Lderived;
     G__Lderived=(ZDCContainer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_ZDCContainer),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_RomanPot))) {
     RomanPot *G__Lderived;
     G__Lderived=(RomanPot*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_RomanPot),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_RomanPotContainer))) {
     RomanPotContainer *G__Lderived;
     G__Lderived=(RomanPotContainer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_RomanPotContainer),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_RHICfSimEvent))) {
     RHICfSimEvent *G__Lderived;
     G__Lderived=(RHICfSimEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_RHICfSimEvent),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_RunInfo))) {
     RunInfo *G__Lderived;
     G__Lderived=(RunInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_RunInfo),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabledict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__dictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__dictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BBCParticle*>",117,G__get_linked_tagnum(&G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BBC*>",117,G__get_linked_tagnum(&G__dictLN_vectorlEBBCmUcOallocatorlEBBCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEBBCmUcOallocatorlEBBCmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEBBCmUcOallocatorlEBBCmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<BBC*> >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<BBC*> >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<BBC*,allocator<BBC*> > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Central*>",117,G__get_linked_tagnum(&G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlECentralmUcOallocatorlECentralmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlECentralmUcOallocatorlECentralmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Forward*>",117,G__get_linked_tagnum(&G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEForwardmUcOallocatorlEForwardmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEForwardmUcOallocatorlEForwardmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double> >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<double> > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double> > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<std::vector<double> > > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<vector<double> > > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > >",117,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__dictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RomanPot*>",117,G__get_linked_tagnum(&G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlERomanPotmUcOallocatorlERomanPotmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictLN_reverse_iteratorlEvectorlERomanPotmUcOallocatorlERomanPotmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* BBCParticle */
static void G__setup_memvarBBCParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_BBCParticle));
   { BBCParticle *p; p=(BBCParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"pdgcode=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TLorentzVector),-1,-1,4,"momentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Flag */
static void G__setup_memvarFlag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_Flag));
   { Flag *p; p=(Flag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,-1,-1,4,"mFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* BBC */
static void G__setup_memvarBBC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_BBC));
   { BBC *p; p=(BBC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"edep=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR),G__defined_typename("vector<BBCParticle*>"),-1,4,"bbchit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* BBCContainer */
static void G__setup_memvarBBCContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_BBCContainer));
   { BBCContainer *p; p=(BBCContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<BBC*> >"),-1,4,"bbcCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Central */
static void G__setup_memvarCentral(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_Central));
   { Central *p; p=(Central*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"motherid=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"pdgcode=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TLorentzVector),-1,-1,4,"momentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TVector3),-1,-1,4,"position1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TVector3),-1,-1,4,"position2=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"isboundary=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CentralContainer */
static void G__setup_memvarCentralContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_CentralContainer));
   { CentralContainer *p; p=(CentralContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR),G__defined_typename("vector<Central*>"),-1,4,"centralCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"process=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Forward */
static void G__setup_memvarForward(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_Forward));
   { Forward *p; p=(Forward*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"motherid=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"pdgcode=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TLorentzVector),-1,-1,4,"momentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TVector3),-1,-1,4,"position=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"isbackground=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ForwardContainer */
static void G__setup_memvarForwardContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_ForwardContainer));
   { ForwardContainer *p; p=(ForwardContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR),G__defined_typename("vector<Forward*>"),-1,4,"forwardCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RecoDataContainer */
static void G__setup_memvarRecoDataContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_RecoDataContainer));
   { RecoDataContainer *p; p=(RecoDataContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"plate=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::vector<std::vector<double> > > >"),-1,4,"bar=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::vector<double> > >"),-1,4,"unused=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCDataContainer */
static void G__setup_memvarMCDataContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_MCDataContainer));
   { MCDataContainer *p; p=(MCDataContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::vector<std::vector<double> > > >"),-1,4,"bar_truth=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"plate_truth=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ZDCContainer */
static void G__setup_memvarZDCContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_ZDCContainer));
   { ZDCContainer *p; p=(ZDCContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"zdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"nphoton=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"smd=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"scin=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RomanPot */
static void G__setup_memvarRomanPot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_RomanPot));
   { RomanPot *p; p=(RomanPot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"pdgcode=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TLorentzVector),-1,-1,4,"momentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TVector3),-1,-1,4,"position1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_TVector3),-1,-1,4,"position2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RomanPotContainer */
static void G__setup_memvarRomanPotContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_RomanPotContainer));
   { RomanPotContainer *p; p=(RomanPotContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR),G__defined_typename("vector<RomanPot*>"),-1,4,"romanpotCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RHICfSimEvent */
static void G__setup_memvarRHICfSimEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_RHICfSimEvent));
   { RHICfSimEvent *p; p=(RHICfSimEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_ForwardContainer),-1,-1,4,"forward=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_CentralContainer),-1,-1,4,"central=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_MCDataContainer),-1,-1,4,"mc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_RecoDataContainer),-1,-1,4,"reco=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_ZDCContainer),-1,-1,4,"zdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_BBCContainer),-1,-1,4,"bbc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_RomanPotContainer),-1,-1,4,"romanpot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RunInfo */
static void G__setup_memvarRunInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_RunInfo));
   { RunInfo *p; p=(RunInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"RunNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"NumberOfEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_string),-1,-1,4,"Model=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"Seed1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"Seed2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictLN_Flag),-1,-1,4,"flag=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"sigTot=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"sigEla=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"sigIne=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvardict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncBBCParticle(void) {
   /* BBCParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_BBCParticle));
   G__memfunc_setup("BBCParticle",1019,G__dict_226_0_1, 105, G__get_linked_tagnum(&G__dictLN_BBCParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPDGCode",898,G__dict_226_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - apdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__dict_226_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 0 - amomentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPDGCode",886,G__dict_226_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__dict_226_0_5, 117, G__get_linked_tagnum(&G__dictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_226_0_6, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BBCParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_226_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBCParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_226_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BBCParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_226_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BBCParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_226_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBCParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BBCParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_226_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBCParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_226_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BBCParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BBCParticle", 1019, G__dict_226_0_18, (int) ('i'), G__get_linked_tagnum(&G__dictLN_BBCParticle), -1, 0, 1, 1, 1, 0, "u 'BBCParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BBCParticle", 1145, G__dict_226_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_226_0_20, (int) ('u'), G__get_linked_tagnum(&G__dictLN_BBCParticle), -1, 1, 1, 1, 1, 0, "u 'BBCParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFlag(void) {
   /* Flag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_Flag));
   G__memfunc_setup("Flag",378,G__dict_227_0_1, 105, G__get_linked_tagnum(&G__dictLN_Flag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("equal",536,G__dict_227_0_2, 103, -1, -1, 0, 1, 1, 1, 8, "b - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__dict_227_0_3, 103, -1, -1, 0, 1, 1, 1, 8, "b - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__dict_227_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "b - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__dict_227_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "b - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_227_0_6, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Flag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_227_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Flag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_227_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Flag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_227_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Flag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_227_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_227_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Flag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_227_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Flag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_227_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Flag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_227_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Flag::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Flag", 378, G__dict_227_0_18, (int) ('i'), G__get_linked_tagnum(&G__dictLN_Flag), -1, 0, 1, 1, 1, 0, "u 'Flag' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Flag", 504, G__dict_227_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_227_0_20, (int) ('u'), G__get_linked_tagnum(&G__dictLN_Flag), -1, 1, 1, 1, 1, 0, "u 'Flag' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBBC(void) {
   /* BBC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_BBC));
   G__memfunc_setup("BBC",199,G__dict_229_0_1, 105, G__get_linked_tagnum(&G__dictLN_BBC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BBC",199,G__dict_229_0_2, 105, G__get_linked_tagnum(&G__dictLN_BBC), -1, 0, 1, 1, 1, 0, "u 'BBC' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__dict_229_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdep",682,G__dict_229_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHit",593,G__dict_229_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<BBCParticle*,allocator<BBCParticle*> >' 'vector<BBCParticle*>' 0 - abbchit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdep",670,G__dict_229_0_6, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__dict_229_0_7, 117, G__get_linked_tagnum(&G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR), G__defined_typename("vector<BBCParticle*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_229_0_8, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BBC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_229_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_229_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BBC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_229_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BBC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_229_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_229_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_229_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BBC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_229_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_229_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BBC::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~BBC", 325, G__dict_229_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_229_0_21, (int) ('u'), G__get_linked_tagnum(&G__dictLN_BBC), -1, 1, 1, 1, 1, 0, "u 'BBC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBBCContainer(void) {
   /* BBCContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_BBCContainer));
   G__memfunc_setup("BBCContainer",1130,G__dict_234_0_1, 105, G__get_linked_tagnum(&G__dictLN_BBCContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__dict_234_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBC",499,G__dict_234_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - aside i - - 0 - aid "
"U 'BBC' - 0 - abbc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainer",1219,G__dict_234_0_4, 117, G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR), G__defined_typename("vector<std::vector<BBC*> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_234_0_5, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BBCContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_234_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBCContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_234_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BBCContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_234_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BBCContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_234_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_234_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBCContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_234_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BBCContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_234_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BBCContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_234_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BBCContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BBCContainer", 1130, G__dict_234_0_17, (int) ('i'), G__get_linked_tagnum(&G__dictLN_BBCContainer), -1, 0, 1, 1, 1, 0, "u 'BBCContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BBCContainer", 1256, G__dict_234_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_234_0_19, (int) ('u'), G__get_linked_tagnum(&G__dictLN_BBCContainer), -1, 1, 1, 1, 1, 0, "u 'BBCContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCentral(void) {
   /* Central */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_Central));
   G__memfunc_setup("Central",713,G__dict_243_0_1, 105, G__get_linked_tagnum(&G__dictLN_Central), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__dict_243_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMotherID",1064,G__dict_243_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - amotherid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPDGcode",930,G__dict_243_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - apdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__dict_243_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 0 - amomentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition1",1202,G__dict_243_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 0 - aposition1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition2",1203,G__dict_243_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 0 - aposition1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBoundary",1136,G__dict_243_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - aboundary", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__dict_243_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMotherID",1052,G__dict_243_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPDGcode",918,G__dict_243_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__dict_243_0_12, 117, G__get_linked_tagnum(&G__dictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition1",1190,G__dict_243_0_13, 117, G__get_linked_tagnum(&G__dictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition2",1191,G__dict_243_0_14, 117, G__get_linked_tagnum(&G__dictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isBoundary",1056,G__dict_243_0_15, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_243_0_16, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Central::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_243_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Central::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_243_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Central::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_243_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Central::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_243_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_243_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Central::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_243_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Central::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_243_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Central::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_243_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Central::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Central", 713, G__dict_243_0_28, (int) ('i'), G__get_linked_tagnum(&G__dictLN_Central), -1, 0, 1, 1, 1, 0, "u 'Central' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Central", 839, G__dict_243_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_243_0_30, (int) ('u'), G__get_linked_tagnum(&G__dictLN_Central), -1, 1, 1, 1, 1, 0, "u 'Central' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCentralContainer(void) {
   /* CentralContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_CentralContainer));
   G__memfunc_setup("CentralContainer",1644,G__dict_244_0_1, 105, G__get_linked_tagnum(&G__dictLN_CentralContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__dict_244_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Push_back",912,G__dict_244_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Central' - 0 - acentral", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainer",1219,G__dict_244_0_4, 117, G__get_linked_tagnum(&G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR), G__defined_typename("vector<Central*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcess",1035,G__dict_244_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aprocess", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcess",1023,G__dict_244_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_244_0_7, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CentralContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_244_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CentralContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_244_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CentralContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_244_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CentralContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_244_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_244_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CentralContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_244_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CentralContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_244_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CentralContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_244_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CentralContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CentralContainer", 1644, G__dict_244_0_19, (int) ('i'), G__get_linked_tagnum(&G__dictLN_CentralContainer), -1, 0, 1, 1, 1, 0, "u 'CentralContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CentralContainer", 1770, G__dict_244_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_244_0_21, (int) ('u'), G__get_linked_tagnum(&G__dictLN_CentralContainer), -1, 1, 1, 1, 1, 0, "u 'CentralContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncForward(void) {
   /* Forward */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_Forward));
   G__memfunc_setup("Forward",725,G__dict_249_0_1, 105, G__get_linked_tagnum(&G__dictLN_Forward), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMotherID",1064,G__dict_249_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - amotherid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPDGcode",930,G__dict_249_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - apdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__dict_249_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 0 - amomentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition",1153,G__dict_249_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 0 - aposition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIsBackground",1512,G__dict_249_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - abackground", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMotherID",1052,G__dict_249_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPDGcode",918,G__dict_249_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__dict_249_0_9, 117, G__get_linked_tagnum(&G__dictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__dict_249_0_10, 117, G__get_linked_tagnum(&G__dictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBackground",1212,G__dict_249_0_11, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_249_0_12, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Forward::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_249_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Forward::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_249_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Forward::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_249_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Forward::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_249_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_249_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Forward::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_249_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Forward::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_249_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Forward::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_249_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Forward::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Forward", 725, G__dict_249_0_24, (int) ('i'), G__get_linked_tagnum(&G__dictLN_Forward), -1, 0, 1, 1, 1, 0, "u 'Forward' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Forward", 851, G__dict_249_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_249_0_26, (int) ('u'), G__get_linked_tagnum(&G__dictLN_Forward), -1, 1, 1, 1, 1, 0, "u 'Forward' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncForwardContainer(void) {
   /* ForwardContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_ForwardContainer));
   G__memfunc_setup("ForwardContainer",1656,G__dict_250_0_1, 105, G__get_linked_tagnum(&G__dictLN_ForwardContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__dict_250_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Push_back",912,G__dict_250_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Forward' - 0 - aforward", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainer",1219,G__dict_250_0_4, 117, G__get_linked_tagnum(&G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR), G__defined_typename("vector<Forward*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_250_0_5, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ForwardContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_250_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ForwardContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_250_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ForwardContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_250_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ForwardContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_250_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_250_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ForwardContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_250_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ForwardContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_250_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ForwardContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_250_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ForwardContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ForwardContainer", 1656, G__dict_250_0_17, (int) ('i'), G__get_linked_tagnum(&G__dictLN_ForwardContainer), -1, 0, 1, 1, 1, 0, "u 'ForwardContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ForwardContainer", 1782, G__dict_250_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_250_0_19, (int) ('u'), G__get_linked_tagnum(&G__dictLN_ForwardContainer), -1, 1, 1, 1, 1, 0, "u 'ForwardContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRecoDataContainer(void) {
   /* RecoDataContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_RecoDataContainer));
   G__memfunc_setup("RecoDataContainer",1702,G__dict_255_0_1, 105, G__get_linked_tagnum(&G__dictLN_RecoDataContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__dict_255_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaxBar",859,G__dict_255_0_3, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - atower i - - 0 - abelt "
"i - - 0 - axy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeltSum",988,G__dict_255_0_4, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - atower i - - 0 - abelt "
"i - - 0 - axy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayerSum",1106,G__dict_255_0_5, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - atower i - - 0 - abelt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxLayerSum",1400,G__dict_255_0_6, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - atower d - - 0 - thr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlate",802,G__dict_255_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - atower i - - 0 - aplate "
"d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBar",577,G__dict_255_0_8, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - atower i - - 0 - abelt "
"i - - 0 - axy i - - 0 - abar "
"d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnused",928,G__dict_255_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - abelt i - - 0 - axy "
"i - - 0 - aunused d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlate",790,G__dict_255_0_10, 117, G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), G__defined_typename("vector<std::vector<double> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBar",565,G__dict_255_0_11, 117, G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR), G__defined_typename("vector<std::vector<std::vector<std::vector<double> > > >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnused",916,G__dict_255_0_12, 117, G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR), G__defined_typename("vector<std::vector<std::vector<double> > >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_255_0_13, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RecoDataContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_255_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RecoDataContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_255_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RecoDataContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_255_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RecoDataContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_255_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_255_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RecoDataContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_255_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RecoDataContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_255_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RecoDataContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_255_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RecoDataContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RecoDataContainer", 1702, G__dict_255_0_25, (int) ('i'), G__get_linked_tagnum(&G__dictLN_RecoDataContainer), -1, 0, 1, 1, 1, 0, "u 'RecoDataContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RecoDataContainer", 1828, G__dict_255_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_255_0_27, (int) ('u'), G__get_linked_tagnum(&G__dictLN_RecoDataContainer), -1, 1, 1, 1, 1, 0, "u 'RecoDataContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCDataContainer(void) {
   /* MCDataContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_MCDataContainer));
   G__memfunc_setup("MCDataContainer",1453,G__dict_268_0_1, 105, G__get_linked_tagnum(&G__dictLN_MCDataContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBarTruth",1112,G__dict_268_0_3, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - atower i - - 0 - abelt "
"i - - 0 - axy i - - 0 - abar "
"d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarTruth",1100,G__dict_268_0_4, 117, G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR), G__defined_typename("vector<std::vector<std::vector<std::vector<double> > > >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlateTruth",1337,G__dict_268_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - atower i - - 0 - aplate "
"d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlateTruth",1325,G__dict_268_0_6, 117, G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), G__defined_typename("vector<std::vector<double> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_268_0_7, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCDataContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_268_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCDataContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_268_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCDataContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_268_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCDataContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_268_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_268_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCDataContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_268_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCDataContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_268_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCDataContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_268_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCDataContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCDataContainer", 1453, G__dict_268_0_19, (int) ('i'), G__get_linked_tagnum(&G__dictLN_MCDataContainer), -1, 0, 1, 1, 1, 0, "u 'MCDataContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCDataContainer", 1579, G__dict_268_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_268_0_21, (int) ('u'), G__get_linked_tagnum(&G__dictLN_MCDataContainer), -1, 1, 1, 1, 1, 0, "u 'MCDataContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncZDCContainer(void) {
   /* ZDCContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_ZDCContainer));
   G__memfunc_setup("ZDCContainer",1156,G__dict_269_0_1, 105, G__get_linked_tagnum(&G__dictLN_ZDCContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__dict_269_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaxModule",1196,G__dict_269_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSumModule",1211,G__dict_269_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDC",525,G__dict_269_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - azdc d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNphoton",1042,G__dict_269_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - azdc i - - 0 - anphoton", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSMD",528,G__dict_269_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - axy i - - 0 - asmd "
"d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScin",697,G__dict_269_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ascin d - - 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDC",513,G__dict_269_0_9, 117, G__get_linked_tagnum(&G__dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNphoton",1030,G__dict_269_0_10, 117, G__get_linked_tagnum(&G__dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSMD",516,G__dict_269_0_11, 117, G__get_linked_tagnum(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), G__defined_typename("vector<std::vector<double> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScin",685,G__dict_269_0_12, 117, G__get_linked_tagnum(&G__dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_269_0_13, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ZDCContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_269_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ZDCContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_269_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ZDCContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_269_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ZDCContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_269_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_269_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ZDCContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_269_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ZDCContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_269_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ZDCContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_269_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ZDCContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ZDCContainer", 1156, G__dict_269_0_25, (int) ('i'), G__get_linked_tagnum(&G__dictLN_ZDCContainer), -1, 0, 1, 1, 1, 0, "u 'ZDCContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ZDCContainer", 1282, G__dict_269_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_269_0_27, (int) ('u'), G__get_linked_tagnum(&G__dictLN_ZDCContainer), -1, 1, 1, 1, 1, 0, "u 'ZDCContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRomanPot(void) {
   /* RomanPot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_RomanPot));
   G__memfunc_setup("RomanPot",816,G__dict_274_0_1, 105, G__get_linked_tagnum(&G__dictLN_RomanPot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPDGcode",930,G__dict_274_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - apdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__dict_274_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 0 - amomentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition1",1202,G__dict_274_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 0 - aposition1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition2",1203,G__dict_274_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 0 - aposition2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPDGcode",918,G__dict_274_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__dict_274_0_7, 117, G__get_linked_tagnum(&G__dictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition1",1190,G__dict_274_0_8, 117, G__get_linked_tagnum(&G__dictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition2",1191,G__dict_274_0_9, 117, G__get_linked_tagnum(&G__dictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_274_0_10, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RomanPot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_274_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RomanPot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_274_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RomanPot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_274_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RomanPot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_274_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_274_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RomanPot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_274_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RomanPot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_274_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RomanPot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_274_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RomanPot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RomanPot", 816, G__dict_274_0_22, (int) ('i'), G__get_linked_tagnum(&G__dictLN_RomanPot), -1, 0, 1, 1, 1, 0, "u 'RomanPot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RomanPot", 942, G__dict_274_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_274_0_24, (int) ('u'), G__get_linked_tagnum(&G__dictLN_RomanPot), -1, 1, 1, 1, 1, 0, "u 'RomanPot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRomanPotContainer(void) {
   /* RomanPotContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_RomanPotContainer));
   G__memfunc_setup("RomanPotContainer",1747,G__dict_275_0_1, 105, G__get_linked_tagnum(&G__dictLN_RomanPotContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__dict_275_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Push_back",912,G__dict_275_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'RomanPot' - 0 - aromanpot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainer",1219,G__dict_275_0_4, 117, G__get_linked_tagnum(&G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR), G__defined_typename("vector<RomanPot*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_275_0_5, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RomanPotContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_275_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RomanPotContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_275_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RomanPotContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_275_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RomanPotContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_275_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_275_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RomanPotContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_275_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RomanPotContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_275_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RomanPotContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_275_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RomanPotContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RomanPotContainer", 1747, G__dict_275_0_17, (int) ('i'), G__get_linked_tagnum(&G__dictLN_RomanPotContainer), -1, 0, 1, 1, 1, 0, "u 'RomanPotContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RomanPotContainer", 1873, G__dict_275_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_275_0_19, (int) ('u'), G__get_linked_tagnum(&G__dictLN_RomanPotContainer), -1, 1, 1, 1, 1, 0, "u 'RomanPotContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRHICfSimEvent(void) {
   /* RHICfSimEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_RHICfSimEvent));
   G__memfunc_setup("RHICfSimEvent",1207,G__dict_280_0_1, 105, G__get_linked_tagnum(&G__dictLN_RHICfSimEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetForward",1025,G__dict_280_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ForwardContainer' - 0 - aforward", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentral",1013,G__dict_280_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'CentralContainer' - 0 - acentral", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMC",444,G__dict_280_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCDataContainer' - 0 - amc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReco",693,G__dict_280_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'RecoDataContainer' - 0 - areco", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDC",525,G__dict_280_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ZDCContainer' - 0 - azdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBC",499,G__dict_280_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'BBCContainer' - 0 - abbc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRomanPot",1116,G__dict_280_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'RomanPotContainer' - 0 - aromanpot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetForward",1013,G__dict_280_0_9, 85, G__get_linked_tagnum(&G__dictLN_ForwardContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentral",1001,G__dict_280_0_10, 85, G__get_linked_tagnum(&G__dictLN_CentralContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMC",432,G__dict_280_0_11, 85, G__get_linked_tagnum(&G__dictLN_MCDataContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReco",681,G__dict_280_0_12, 85, G__get_linked_tagnum(&G__dictLN_RecoDataContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDC",513,G__dict_280_0_13, 85, G__get_linked_tagnum(&G__dictLN_ZDCContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBBC",487,G__dict_280_0_14, 85, G__get_linked_tagnum(&G__dictLN_BBCContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRomanPot",1104,G__dict_280_0_15, 85, G__get_linked_tagnum(&G__dictLN_RomanPotContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_280_0_16, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RHICfSimEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_280_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHICfSimEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_280_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RHICfSimEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_280_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RHICfSimEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_280_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_280_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHICfSimEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_280_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RHICfSimEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_280_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHICfSimEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_280_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RHICfSimEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RHICfSimEvent", 1207, G__dict_280_0_28, (int) ('i'), G__get_linked_tagnum(&G__dictLN_RHICfSimEvent), -1, 0, 1, 1, 1, 0, "u 'RHICfSimEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RHICfSimEvent", 1333, G__dict_280_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_280_0_30, (int) ('u'), G__get_linked_tagnum(&G__dictLN_RHICfSimEvent), -1, 1, 1, 1, 1, 0, "u 'RHICfSimEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRunInfo(void) {
   /* RunInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_RunInfo));
   G__memfunc_setup("RunInfo",705,G__dict_281_0_1, 105, G__get_linked_tagnum(&G__dictLN_RunInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNumber",1226,G__dict_281_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aRunNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfEvents",1727,G__dict_281_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aNumberOfEvents", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetModel",797,G__dict_281_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - aModel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeed1",734,G__dict_281_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aSeed1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeed2",735,G__dict_281_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aSeed2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__dict_281_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Flag' - 0 - aflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigTot",902,G__dict_281_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - asigTot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigEla",865,G__dict_281_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - asigEla", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigIne",875,G__dict_281_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - asigIne", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__dict_281_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfEvents",1715,G__dict_281_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModel",785,G__dict_281_0_13, 117, G__get_linked_tagnum(&G__dictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeed1",722,G__dict_281_0_14, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeed2",723,G__dict_281_0_15, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlag",666,G__dict_281_0_16, 117, G__get_linked_tagnum(&G__dictLN_Flag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigTot",890,G__dict_281_0_17, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigEla",853,G__dict_281_0_18, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigIne",863,G__dict_281_0_19, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dict_281_0_20, 85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RunInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dict_281_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dict_281_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RunInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dict_281_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RunInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dict_281_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dict_281_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dict_281_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RunInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dict_281_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dict_281_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RunInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RunInfo", 705, G__dict_281_0_32, (int) ('i'), G__get_linked_tagnum(&G__dictLN_RunInfo), -1, 0, 1, 1, 1, 0, "u 'RunInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RunInfo", 831, G__dict_281_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dict_281_0_34, (int) ('u'), G__get_linked_tagnum(&G__dictLN_RunInfo), -1, 1, 1, 1, 1, 0, "u 'RunInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaldict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__dictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__dictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__dictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__dictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__dictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__dictLN_BBCParticle = { "BBCParticle" , 99 , -1 };
G__linked_taginfo G__dictLN_Flag = { "Flag" , 99 , -1 };
G__linked_taginfo G__dictLN_BBC = { "BBC" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR = { "vector<BBCParticle*,allocator<BBCParticle*> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<BBCParticle*,allocator<BBCParticle*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_BBCContainer = { "BBCContainer" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEBBCmUcOallocatorlEBBCmUgRsPgR = { "vector<BBC*,allocator<BBC*> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<BBC*,allocator<BBC*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR = { "vector<vector<BBC*,allocator<BBC*> >,allocator<vector<BBC*,allocator<BBC*> > > >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<BBC*,allocator<BBC*> >,allocator<vector<BBC*,allocator<BBC*> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_Central = { "Central" , 99 , -1 };
G__linked_taginfo G__dictLN_CentralContainer = { "CentralContainer" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR = { "vector<Central*,allocator<Central*> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlECentralmUcOallocatorlECentralmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Central*,allocator<Central*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_Forward = { "Forward" , 99 , -1 };
G__linked_taginfo G__dictLN_ForwardContainer = { "ForwardContainer" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR = { "vector<Forward*,allocator<Forward*> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEForwardmUcOallocatorlEForwardmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Forward*,allocator<Forward*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_RecoDataContainer = { "RecoDataContainer" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >,allocator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > > >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >,allocator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_MCDataContainer = { "MCDataContainer" , 99 , -1 };
G__linked_taginfo G__dictLN_ZDCContainer = { "ZDCContainer" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_RomanPot = { "RomanPot" , 99 , -1 };
G__linked_taginfo G__dictLN_RomanPotContainer = { "RomanPotContainer" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR = { "vector<RomanPot*,allocator<RomanPot*> >" , 99 , -1 };
G__linked_taginfo G__dictLN_reverse_iteratorlEvectorlERomanPotmUcOallocatorlERomanPotmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<RomanPot*,allocator<RomanPot*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictLN_RHICfSimEvent = { "RHICfSimEvent" , 99 , -1 };
G__linked_taginfo G__dictLN_RunInfo = { "RunInfo" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabledict() {
  G__dictLN_TClass.tagnum = -1 ;
  G__dictLN_TBuffer.tagnum = -1 ;
  G__dictLN_TMemberInspector.tagnum = -1 ;
  G__dictLN_TObject.tagnum = -1 ;
  G__dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__dictLN_string.tagnum = -1 ;
  G__dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__dictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__dictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__dictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__dictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__dictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__dictLN_TVector3.tagnum = -1 ;
  G__dictLN_TLorentzVector.tagnum = -1 ;
  G__dictLN_BBCParticle.tagnum = -1 ;
  G__dictLN_Flag.tagnum = -1 ;
  G__dictLN_BBC.tagnum = -1 ;
  G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_BBCContainer.tagnum = -1 ;
  G__dictLN_vectorlEBBCmUcOallocatorlEBBCmUgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_Central.tagnum = -1 ;
  G__dictLN_CentralContainer.tagnum = -1 ;
  G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlECentralmUcOallocatorlECentralmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_Forward.tagnum = -1 ;
  G__dictLN_ForwardContainer.tagnum = -1 ;
  G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEForwardmUcOallocatorlEForwardmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_RecoDataContainer.tagnum = -1 ;
  G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_MCDataContainer.tagnum = -1 ;
  G__dictLN_ZDCContainer.tagnum = -1 ;
  G__dictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_RomanPot.tagnum = -1 ;
  G__dictLN_RomanPotContainer.tagnum = -1 ;
  G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR.tagnum = -1 ;
  G__dictLN_reverse_iteratorlEvectorlERomanPotmUcOallocatorlERomanPotmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictLN_RHICfSimEvent.tagnum = -1 ;
  G__dictLN_RunInfo.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabledict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_string);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__dictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__dictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__dictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__dictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_BBCParticle),sizeof(BBCParticle),-1,29952,(char*)NULL,G__setup_memvarBBCParticle,G__setup_memfuncBBCParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_Flag),sizeof(Flag),-1,29952,(char*)NULL,G__setup_memvarFlag,G__setup_memfuncFlag);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_BBC),sizeof(BBC),-1,30464,(char*)NULL,G__setup_memvarBBC,G__setup_memfuncBBC);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEBBCParticlemUcOallocatorlEBBCParticlemUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_BBCContainer),sizeof(BBCContainer),-1,29952,(char*)NULL,G__setup_memvarBBCContainer,G__setup_memfuncBBCContainer);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEBBCmUcOallocatorlEBBCmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRcOallocatorlEvectorlEBBCmUcOallocatorlEBBCmUgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_Central),sizeof(Central),-1,29952,(char*)NULL,G__setup_memvarCentral,G__setup_memfuncCentral);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_CentralContainer),sizeof(CentralContainer),-1,29952,(char*)NULL,G__setup_memvarCentralContainer,G__setup_memfuncCentralContainer);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlECentralmUcOallocatorlECentralmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlECentralmUcOallocatorlECentralmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_Forward),sizeof(Forward),-1,29952,(char*)NULL,G__setup_memvarForward,G__setup_memfuncForward);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_ForwardContainer),sizeof(ForwardContainer),-1,29952,(char*)NULL,G__setup_memvarForwardContainer,G__setup_memfuncForwardContainer);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEForwardmUcOallocatorlEForwardmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEForwardmUcOallocatorlEForwardmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_RecoDataContainer),sizeof(RecoDataContainer),-1,29952,(char*)NULL,G__setup_memvarRecoDataContainer,G__setup_memfuncRecoDataContainer);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_MCDataContainer),sizeof(MCDataContainer),-1,29952,(char*)NULL,G__setup_memvarMCDataContainer,G__setup_memfuncMCDataContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_ZDCContainer),sizeof(ZDCContainer),-1,29952,(char*)NULL,G__setup_memvarZDCContainer,G__setup_memfuncZDCContainer);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_RomanPot),sizeof(RomanPot),-1,29952,(char*)NULL,G__setup_memvarRomanPot,G__setup_memfuncRomanPot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_RomanPotContainer),sizeof(RomanPotContainer),-1,29952,(char*)NULL,G__setup_memvarRomanPotContainer,G__setup_memfuncRomanPotContainer);
   G__get_linked_tagnum_fwd(&G__dictLN_vectorlERomanPotmUcOallocatorlERomanPotmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictLN_reverse_iteratorlEvectorlERomanPotmUcOallocatorlERomanPotmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_RHICfSimEvent),sizeof(RHICfSimEvent),-1,29952,(char*)NULL,G__setup_memvarRHICfSimEvent,G__setup_memfuncRHICfSimEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictLN_RunInfo),sizeof(RunInfo),-1,29952,(char*)NULL,G__setup_memvarRunInfo,G__setup_memfuncRunInfo);
}
extern "C" void G__cpp_setupdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupdict()");
  G__set_cpp_environmentdict();
  G__cpp_setup_tagtabledict();

  G__cpp_setup_inheritancedict();

  G__cpp_setup_typetabledict();

  G__cpp_setup_memvardict();

  G__cpp_setup_memfuncdict();
  G__cpp_setup_globaldict();
  G__cpp_setup_funcdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncdict();
  return;
}
class G__cpp_setup_initdict {
  public:
    G__cpp_setup_initdict() { G__add_setup_func("dict",(G__incsetup)(&G__cpp_setupdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initdict() { G__remove_setup_func("dict"); }
};
G__cpp_setup_initdict G__cpp_setup_initializerdict;

